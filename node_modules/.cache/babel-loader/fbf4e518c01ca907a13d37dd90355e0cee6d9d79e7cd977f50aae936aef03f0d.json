{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\n    return chosenString.length === VIDEO_ID_SIZE ? chosenString : EMPTY;\n  }\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => {\n    return isValid;\n  }).catch(e => {\n    console.error(e);\n  });\n  if (!isValid) {\n    return EMPTY;\n  }\n  const videoId = getVideoIdParam(chosenString);\n  return videoId;\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  console.log(`url: ${url}`);\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  console.log(videoId);\n  return videoId;\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl;\n    }\n    const youtubeURLObject = new URL(youtubeUrl);\n    const hostname = youtubeURLObject.hostname;\n    let isValidUrl = false;\n    filterStrings.every(domainName => {\n      if (hostname === domainName) {\n        isValidUrl = true;\n        return false;\n      }\n    });\n    return isValidUrl;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasYoutubeTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.be');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","hasYoutubeTopLevelDomain","length","isValid","isValidYoutubeUrl","then","catch","e","console","error","videoId","getVideoIdParam","urlString","url","includes","log","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","isValidUrl","every","domainName","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\n    return chosenString.length === VIDEO_ID_SIZE ? chosenString : EMPTY\n  }\n\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => { return isValid}).catch(e => {\n    console.error(e)\n  })\n  if (!isValid) {\n    return EMPTY\n  }\n  const videoId = getVideoIdParam(chosenString)\n    return videoId\n}\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n  console.log(`url: ${url}`);\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  console.log(videoId);\n  return videoId\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl\n    }\n\n    const youtubeURLObject = new URL(youtubeUrl)\n    const hostname = youtubeURLObject.hostname\n    let isValidUrl = false\n\n    filterStrings.every((domainName) => {\n      if (hostname === domainName) {\n        isValidUrl = true\n        return false\n      }\n    })\n    return isValidUrl\n  } catch (e) {\n    return false\n  }\n\n}\n\nfunction hasYoutubeTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.be')\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,aAAa,EAAEC,GAAG,EAAEC,KAAK,QAAQ,wBAAwB;;AAEzE;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,YAAY,EAAE;EAC1C,IAAI,CAACC,wBAAwB,CAACD,YAAY,CAAC,EAAE;IAC3C,OAAOA,YAAY,CAACE,MAAM,KAAKN,aAAa,GAAGI,YAAY,GAAGL,KAAK;EACrE;EAEA,MAAMQ,OAAO,GAAGC,iBAAiB,CAACJ,YAAY,CAAC,CAACK,IAAI,CAACF,OAAO,IAAI;IAAE,OAAOA,OAAO;EAAA,CAAC,CAAC,CAACG,KAAK,CAACC,CAAC,IAAI;IAC5FC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;EAClB,CAAC,CAAC;EACF,IAAI,CAACJ,OAAO,EAAE;IACZ,OAAOR,KAAK;EACd;EACA,MAAMe,OAAO,GAAGC,eAAe,CAACX,YAAY,CAAC;EAC3C,OAAOU,OAAO;AAClB;AAEA,SAASC,eAAeA,CAACC,SAAS,EAAE;EAClC,IAAIC,GAAG,GAAGD,SAAS;EACnB,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACjB,GAAG,CAAC,EAAE;IACtBgB,GAAG,GAAGhB,GAAG,GAAGgB,GAAG;EACjB;EACA,IAAI,CAACA,GAAG,CAACC,QAAQ,CAAChB,KAAK,CAAC,EAAE;IACxBe,GAAG,GAAGf,KAAK,GAAGe,GAAG;EACnB;EACAL,OAAO,CAACO,GAAG,CAAE,QAAOF,GAAI,EAAC,CAAC;EAC1B,MAAMG,MAAM,GAAG,IAAIC,GAAG,CAACJ,GAAG,CAAC,CAACK,YAAY;EAExC,MAAMR,OAAO,GAAGM,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAC/BX,OAAO,CAACO,GAAG,CAACL,OAAO,CAAC;EACpB,OAAOA,OAAO;AAChB;;AAEA;AACA,eAAeN,iBAAiBA,CAACQ,SAAS,EAAE;EAC1C,IAAI;IACF,MAAMQ,KAAK,GAAGR,SAAS,CAACE,QAAQ,CAACjB,GAAG,CAAC,GAAGe,SAAS,CAACS,OAAO,CAACxB,GAAG,CAAC,GAAGA,GAAG,CAACK,MAAM,GAAG,CAAC;IAC/E,IAAIoB,UAAU,GAAGV,SAAS,CAACW,SAAS,CAACH,KAAK,EAAER,SAAS,CAACS,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC,CAAC;IAE1E,MAAMI,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;IAElE,IAAI,CAACF,UAAU,CAACR,QAAQ,CAAChB,KAAK,CAAC,EAAE;MAC/BwB,UAAU,GAAGxB,KAAK,GAAGwB,UAAU;IACjC;IAEA,MAAMG,gBAAgB,GAAG,IAAIR,GAAG,CAACK,UAAU,CAAC;IAC5C,MAAMI,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ;IAC1C,IAAIC,UAAU,GAAG,KAAK;IAEtBH,aAAa,CAACI,KAAK,CAAEC,UAAU,IAAK;MAClC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;QAC3BF,UAAU,GAAG,IAAI;QACjB,OAAO,KAAK;MACd;IACF,CAAC,CAAC;IACF,OAAOA,UAAU;EACnB,CAAC,CAAC,OAAOpB,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AAEF;AAEA,SAASN,wBAAwBA,CAAC6B,MAAM,EAAE;EACxC,OAAOA,MAAM,CAAChB,QAAQ,CAAC,MAAM,CAAC,IAAIgB,MAAM,CAAChB,QAAQ,CAAC,KAAK,CAAC;AAC1D"},"metadata":{},"sourceType":"module","externalDependencies":[]}