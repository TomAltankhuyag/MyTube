{"ast":null,"code":"export default function videoIdParser(chosenString = 'www.youtube.com/watch?jo=123&v=titties&pp=32', opts = {}) {\n  // not a URL\n  if (!chosenString.includes('.com')) {\n    return chosenString;\n  }\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  // lord forgive me\n  const WWW = 'www.';\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift));\n  if (!youtubeUrl.includes('https://')) {\n    youtubeUrl = 'https://' + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domainName => {\n    if (hostname === domainName) {\n      validUrl = true;\n      return false;\n    }\n  });\n  if (!validUrl) {\n    console.error('not a certified youtube link');\n  }\n  console.log(chosenString);\n  const params = new URLSearchParams(chosenString);\n  console.log(params.keys());\n  params.forEach(param => {\n    console.log(param);\n  });\n  const videoId = params.get('v');\n  console.log(videoId);\n  if (!videoId) {\n    console.log('no v=');\n  }\n  return videoId;\n}","map":{"version":3,"names":["videoIdParser","chosenString","opts","includes","filterStrings","WWW","shift","indexOf","length","youtubeUrl","substring","youtubeURLObject","URL","hostname","validUrl","every","domainName","console","error","log","params","URLSearchParams","keys","forEach","param","videoId","get"],"sources":["X:/Coding/MyTube/src/utility/parser/video-id-parser.js"],"sourcesContent":["export default function videoIdParser(chosenString = 'www.youtube.com/watch?jo=123&v=titties&pp=32', opts = {}) {\n  // not a URL\n  if (!chosenString.includes('.com')) {\n    return chosenString\n  }\n\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n  // lord forgive me\n  const WWW = 'www.'\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift))\n\n  if (!youtubeUrl.includes('https://')) {\n    youtubeUrl = 'https://' + youtubeUrl\n  }\n  const youtubeURLObject = new URL(youtubeUrl)\n\n  const hostname = youtubeURLObject.hostname\n  let validUrl = false\n  filterStrings.every((domainName)=> {\n    if (hostname === domainName) {\n      validUrl = true\n      return false\n    }\n  })\n  if (!validUrl) {\n    console.error('not a certified youtube link')\n  }\n\n\n  console.log(chosenString)\n  const params = new URLSearchParams(chosenString)\n  console.log(params.keys());\n\n\nparams.forEach((param) =>{\n  console.log(param)\n})\n\n\n\n\n\n\n\n\n\n  const videoId = params.get('v')\n  console.log(videoId)\n\n  if (!videoId) {\n    console.log('no v=')\n  }\n  return videoId\n\n}\n\n"],"mappings":"AAAA,eAAe,SAASA,aAAaA,CAACC,YAAY,GAAG,8CAA8C,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAC9G;EACA,IAAI,CAACD,YAAY,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;IAClC,OAAOF,YAAY;EACrB;EAEA,MAAMG,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;EAClE;EACA,MAAMC,GAAG,GAAG,MAAM;EAClB,MAAMC,KAAK,GAAGL,YAAY,CAACE,QAAQ,CAACE,GAAG,CAAC,GAAGJ,YAAY,CAACM,OAAO,CAACF,GAAG,CAAC,GAAGA,GAAG,CAACG,MAAM,GAAG,CAAC;EACrF,IAAIC,UAAU,GAAGR,YAAY,CAACS,SAAS,CAACJ,KAAK,EAAEL,YAAY,CAACM,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC,CAAC;EAEhF,IAAI,CAACG,UAAU,CAACN,QAAQ,CAAC,UAAU,CAAC,EAAE;IACpCM,UAAU,GAAG,UAAU,GAAGA,UAAU;EACtC;EACA,MAAME,gBAAgB,GAAG,IAAIC,GAAG,CAACH,UAAU,CAAC;EAE5C,MAAMI,QAAQ,GAAGF,gBAAgB,CAACE,QAAQ;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpBV,aAAa,CAACW,KAAK,CAAEC,UAAU,IAAI;IACjC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;MAC3BF,QAAQ,GAAG,IAAI;MACf,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,IAAI,CAACA,QAAQ,EAAE;IACbG,OAAO,CAACC,KAAK,CAAC,8BAA8B,CAAC;EAC/C;EAGAD,OAAO,CAACE,GAAG,CAAClB,YAAY,CAAC;EACzB,MAAMmB,MAAM,GAAG,IAAIC,eAAe,CAACpB,YAAY,CAAC;EAChDgB,OAAO,CAACE,GAAG,CAACC,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;EAG5BF,MAAM,CAACG,OAAO,CAAEC,KAAK,IAAI;IACvBP,OAAO,CAACE,GAAG,CAACK,KAAK,CAAC;EACpB,CAAC,CAAC;EAUA,MAAMC,OAAO,GAAGL,MAAM,CAACM,GAAG,CAAC,GAAG,CAAC;EAC/BT,OAAO,CAACE,GAAG,CAACM,OAAO,CAAC;EAEpB,IAAI,CAACA,OAAO,EAAE;IACZR,OAAO,CAACE,GAAG,CAAC,OAAO,CAAC;EACtB;EACA,OAAOM,OAAO;AAEhB"},"metadata":{},"sourceType":"module","externalDependencies":[]}