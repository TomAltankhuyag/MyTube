{"ast":null,"code":"import { reject } from \"core-js/fn/promise\";\nimport { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  if (isValidYoutubeUrl(chosenString)) {\n    const videoId = getVideoIdParam(chosenString);\n    return videoId;\n  } else if (chosenString.length === VIDEO_ID_SIZE) {\n    return chosenString;\n  } else {\n    return EMPTY;\n  }\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n  return new Promise((resolve, reject) => {\n    try {\n      const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n      let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n      console.log(youtubeUrl);\n      const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n      if (!youtubeUrl.includes(HTTPS)) {\n        youtubeUrl = HTTPS + youtubeUrl;\n      }\n      console.log(youtubeUrl);\n      const youtubeURLObject = new URL(youtubeUrl);\n      const hostname = youtubeURLObject.hostname;\n      let validUrl = false;\n      filterStrings.every(domainName => {\n        if (hostname === domainName) {\n          validUrl = true;\n          return false;\n        }\n      });\n      // return validUrl\n      resolve(validUrl);\n    } catch (e) {\n      console.warn(e);\n      reject(false);\n    }\n  });\n}\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}","map":{"version":3,"names":["reject","EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","isValidYoutubeUrl","videoId","getVideoIdParam","length","urlString","url","includes","params","URL","searchParams","get","Promise","resolve","shift","indexOf","youtubeUrl","substring","console","log","filterStrings","youtubeURLObject","hostname","validUrl","every","domainName","e","warn","hasTopLevelDomain","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { reject } from \"core-js/fn/promise\"\nimport { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n\n  if (isValidYoutubeUrl(chosenString)) {\n    const videoId = getVideoIdParam(chosenString)\n    return videoId\n  }\n  else if (chosenString.length === VIDEO_ID_SIZE) {\n    return chosenString\n  }\n  else {\n    return EMPTY\n  }\n}\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  return videoId\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n  return new Promise((resolve, reject) => {\n\n    try {\n      const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n\n      let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n      console.log(youtubeUrl);\n      const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n      if (!youtubeUrl.includes(HTTPS)) {\n        youtubeUrl = HTTPS + youtubeUrl\n      }\n      console.log(youtubeUrl)\n      const youtubeURLObject = new URL(youtubeUrl)\n\n      const hostname = youtubeURLObject.hostname\n      let validUrl = false\n      filterStrings.every((domainName) => {\n        if (hostname === domainName) {\n          validUrl = true\n          return false\n        }\n      })\n      // return validUrl\n      resolve(validUrl)\n    } catch (e) {\n      console.warn(e)\n      reject(false)\n    }\n  })\n}\n\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg')\n    || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}