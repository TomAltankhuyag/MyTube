{"ast":null,"code":"import YoutubeVideo from './components/YoutubeVideo.vue';\nimport YoutubeController from './components/YoutubeController.vue';\nimport DebugPanel from './components/DebugPanel.vue';\nimport CurrentPlaylist from './components/CurrentPlaylist.vue';\nimport { usePlaylistStore } from './store/playlist';\nimport { VSwitch } from 'vuetify/components';\nimport { mapState } from 'pinia';\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeController,\n    DebugPanel,\n    VSwitch,\n    CurrentPlaylist\n  },\n  data() {\n    return {\n      isDebuggerOn: false,\n      isPlaylistOn: false\n    };\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input);\n      fetchVideoInformation(videoId).then(status => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.onValidIdSubmission( /*  TODO   */);\n          this.videoId = videoId;\n        }\n      });\n    },\n    onValidIdSubmission(videoId) {\n      //TODO fetchVideoInformation should return a payload of information including videoId, name, Channel\n      // see youtube-video-validation.js\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentSong']),\n    videoId() {\n      return this.currentSong.videoId;\n    }\n  }\n};","map":{"version":3,"names":["YoutubeVideo","YoutubeController","DebugPanel","CurrentPlaylist","usePlaylistStore","VSwitch","mapState","name","components","data","isDebuggerOn","isPlaylistOn","methods","onSubmit","input","videoId","videoIdParser","fetchVideoInformation","then","status","YOUTUBE_API_CODES","VALID","onValidIdSubmission","computed","currentSong"],"sources":["X:\\Coding\\MyTube\\src\\App.vue"],"sourcesContent":["<template lang=\"pug\">\r\n#app.app\r\n  .youtube-app-container\r\n    youtube-controller.controller\r\n    youtube-video(:videoId=\"videoId\").video\r\n    v-switch(v-model=\"isDebuggerOn\"\r\n             label=\"debugger\"\r\n             color=\"red\"\r\n             :class=\"{activated: isDebuggerOn}\").switch-style\r\n    v-switch(v-model=\"isPlaylistOn\"\r\n             label=\"playlist\"\r\n             color=\"red\"\r\n             :class=\"{activated: isPlaylistOn}\").switch-style\r\n    current-playlist(v-if=\"isPlaylistOn\")\r\n    debug-panel(v-if=\"isDebuggerOn\")\r\n</template>\r\n\r\n<script>\r\nimport YoutubeVideo from './components/YoutubeVideo.vue'\r\nimport YoutubeController from './components/YoutubeController.vue'\r\nimport DebugPanel from './components/DebugPanel.vue'\r\nimport CurrentPlaylist from './components/CurrentPlaylist.vue'\r\nimport { usePlaylistStore } from './store/playlist'\r\nimport { VSwitch } from 'vuetify/components'\r\nimport { mapState } from 'pinia'\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    YoutubeVideo,\r\n    YoutubeController,\r\n    DebugPanel,\r\n    VSwitch,\r\n    CurrentPlaylist\r\n  },\r\n  data() {\r\n    return {\r\n      isDebuggerOn: false,\r\n      isPlaylistOn: false\r\n    }\r\n  },\r\n  methods: {\r\n    onSubmit(input) {\r\n      const videoId = videoIdParser(input)\r\n      fetchVideoInformation(videoId).then((status) => {\r\n        if (status === YOUTUBE_API_CODES.VALID) {\r\n          this.onValidIdSubmission(/*  TODO   */)\r\n          this.videoId = videoId\r\n        }\r\n      })\r\n    },\r\n    onValidIdSubmission(videoId) {\r\n      //TODO fetchVideoInformation should return a payload of information including videoId, name, Channel\r\n      // see youtube-video-validation.js\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(usePlaylistStore, ['currentSong']),\r\n\r\n    videoId() {\r\n      return this.currentSong.videoId\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import 'src/styles/flex';\r\n\r\n.youtube-app-container {\r\n  @include flex-column();\r\n\r\n  .controller {\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  .video {\r\n    margin: 15px;\r\n  }\r\n}\r\n\r\n.switch-style {\r\n  color: red;\r\n  font-family: copperplate;\r\n\r\n  &.activated {\r\n    color: blue;\r\n    font-family: papyrus;\r\n  }\r\n}\r\n\r\n.youtube-app-container {\r\n  @include flex-column();\r\n}\r\n</style>\r\n<style lang=\"scss\">\r\n// * {\r\n//   background-image: url('assets/images/pinkStreets.jpg');\r\n//   background-size: cover;\r\n//   // background-repeat: no-repeat, repeat;\r\n//   background-attachment: fixed;\r\n// }\r\n</style>\r\n"],"mappings":"AAkBA,OAAOA,YAAW,MAAO,+BAA8B;AACvD,OAAOC,iBAAgB,MAAO,oCAAmC;AACjE,OAAOC,UAAS,MAAO,6BAA4B;AACnD,OAAOC,eAAc,MAAO,kCAAiC;AAC7D,SAASC,gBAAe,QAAS,kBAAiB;AAClD,SAASC,OAAM,QAAS,oBAAmB;AAC3C,SAASC,QAAO,QAAS,OAAM;AAC/B,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVR,YAAY;IACZC,iBAAiB;IACjBC,UAAU;IACVG,OAAO;IACPF;EACF,CAAC;EACDM,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAACC,KAAK,EAAE;MACd,MAAMC,OAAM,GAAIC,aAAa,CAACF,KAAK;MACnCG,qBAAqB,CAACF,OAAO,CAAC,CAACG,IAAI,CAAEC,MAAM,IAAK;QAC9C,IAAIA,MAAK,KAAMC,iBAAiB,CAACC,KAAK,EAAE;UACtC,IAAI,CAACC,mBAAmB,CAAc,CAAb,cAAa;UACtC,IAAI,CAACP,OAAM,GAAIA,OAAM;QACvB;MACF,CAAC;IACH,CAAC;IACDO,mBAAmBA,CAACP,OAAO,EAAE;MAC3B;MACA;IAAA;EAEJ,CAAC;EACDQ,QAAQ,EAAE;IACR,GAAGjB,QAAQ,CAACF,gBAAgB,EAAE,CAAC,aAAa,CAAC,CAAC;IAE9CW,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACS,WAAW,CAACT,OAAM;IAChC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}