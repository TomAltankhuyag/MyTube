{"ast":null,"code":"import YoutubeVideo from './components/YouttubeVideo.vue';\nimport YoutubeConfigurator from './components/YoutubeConfigurator.vue';\nimport DebugPanel from './components/DebugPanel.vue';\nimport { videoIdParser } from './utility/parser';\nimport { validateVideoId } from './utility/validator/youtube-video-validation';\nimport { YOUTUBE_API_CODES } from './constants/constants';\nimport { useItemStore } from './store/item';\nimport { usePlaylistStore } from './store/playlist';\nimport { VSwitch } from 'vuetify/components';\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeConfigurator,\n    DebugPanel,\n    VSwitch\n  },\n  data() {\n    return {\n      videoId: 'MpGsiRy8jUk',\n      autoPause: false,\n      label: 'Enter a URL or video ID',\n      placeholder: 'ex: https://www.youtube.com/watch?v=_83LZ79VMLg&ab_channel=MrMoMMusic',\n      switchValue: false\n    };\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input);\n      validateVideoId(videoId).then(status => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.videoId = videoId;\n        }\n      });\n    },\n    onToggleSwitch(switchValue) {\n      this.autoPause = switchValue;\n      const store = useItemStore();\n      console.log(store.getId);\n      store.doShit();\n      const playStore = usePlaylistStore();\n      console.log(playStore.getPlaylistById(id));\n    }\n  }\n};","map":{"version":3,"names":["YoutubeVideo","YoutubeConfigurator","DebugPanel","videoIdParser","validateVideoId","YOUTUBE_API_CODES","useItemStore","usePlaylistStore","VSwitch","name","components","data","videoId","autoPause","label","placeholder","switchValue","methods","onSubmit","input","then","status","VALID","onToggleSwitch","store","console","log","getId","doShit","playStore","getPlaylistById","id"],"sources":["X:\\Coding\\MyTube\\src\\App.vue"],"sourcesContent":["<template lang=\"pug\">\n#app.app\n  .youtube-app-container\n    youtube-configurator(:placeholder=\"placeholder\"\n                         :label=\"label\"\n                         @onSubmit=\"onSubmit\"\n                         @toggle-switch=\"onToggleSwitch\")\n    youtube-video(:videoId=\"videoId\"\n      :autoPause=\"autoPause\")\n    v-switch(v-model=\"switchValue\"\n             label=\"debugger\"\n             color=\"red\"\n             :class=\"{activated: switchValue}\").switch-style\n    debug-panel(v-if=\"switchValue\")\n</template>\n\n<script>\nimport YoutubeVideo from './components/YouttubeVideo.vue'\nimport YoutubeConfigurator from './components/YoutubeConfigurator.vue'\nimport DebugPanel from './components/DebugPanel.vue'\nimport { videoIdParser } from './utility/parser'\nimport { validateVideoId } from './utility/validator/youtube-video-validation'\nimport { YOUTUBE_API_CODES } from './constants/constants'\nimport { useItemStore } from './store/item'\nimport { usePlaylistStore } from './store/playlist'\nimport { VSwitch } from 'vuetify/components'\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeConfigurator,\n    DebugPanel,\n    VSwitch\n  },\n  data() {\n    return {\n      videoId: 'MpGsiRy8jUk',\n      autoPause: false,\n      label: 'Enter a URL or video ID',\n      placeholder: 'ex: https://www.youtube.com/watch?v=_83LZ79VMLg&ab_channel=MrMoMMusic',\n      switchValue: false\n    }\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input)\n      validateVideoId(videoId).then((status) => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.videoId = videoId\n        }\n      })\n    },\n    onToggleSwitch(switchValue) {\n      this.autoPause = switchValue\n      const store = useItemStore()\n      console.log(store.getId)\n      store.doShit()\n\n      const playStore = usePlaylistStore()\n      console.log(playStore.getPlaylistById(id));\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'src/styles/flex';\n\n.switch-style {\n  color: red;\n  font-family: copperplate;\n  &.activated {\n    color: blue;\n    font-family: papyrus;\n  }\n}\n.youtube-app-container {\n  @include flex-column();\n}\n</style>\n<style lang=\"scss\">\n* {\n  background-image: url('assets/images/pinkStreets.jpg');\n  background-size: cover;\n  // background-repeat: no-repeat, repeat;\n  background-attachment: fixed;\n}\n</style>\n"],"mappings":"AAiBA,OAAOA,YAAW,MAAO,gCAA+B;AACxD,OAAOC,mBAAkB,MAAO,sCAAqC;AACrE,OAAOC,UAAS,MAAO,6BAA4B;AACnD,SAASC,aAAY,QAAS,kBAAiB;AAC/C,SAASC,eAAc,QAAS,8CAA6C;AAC7E,SAASC,iBAAgB,QAAS,uBAAsB;AACxD,SAASC,YAAW,QAAS,cAAa;AAC1C,SAASC,gBAAe,QAAS,kBAAiB;AAClD,SAASC,OAAM,QAAS,oBAAmB;AAC3C,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVV,YAAY;IACZC,mBAAmB;IACnBC,UAAU;IACVM;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE,aAAa;MACtBC,SAAS,EAAE,KAAK;MAChBC,KAAK,EAAE,yBAAyB;MAChCC,WAAW,EAAE,uEAAuE;MACpFC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAACC,KAAK,EAAE;MACd,MAAMP,OAAM,GAAIT,aAAa,CAACgB,KAAK;MACnCf,eAAe,CAACQ,OAAO,CAAC,CAACQ,IAAI,CAAEC,MAAM,IAAK;QACxC,IAAIA,MAAK,KAAMhB,iBAAiB,CAACiB,KAAK,EAAE;UACtC,IAAI,CAACV,OAAM,GAAIA,OAAM;QACvB;MACF,CAAC;IACH,CAAC;IACDW,cAAcA,CAACP,WAAW,EAAE;MAC1B,IAAI,CAACH,SAAQ,GAAIG,WAAU;MAC3B,MAAMQ,KAAI,GAAIlB,YAAY,CAAC;MAC3BmB,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,KAAK;MACvBH,KAAK,CAACI,MAAM,CAAC;MAEb,MAAMC,SAAQ,GAAItB,gBAAgB,CAAC;MACnCkB,OAAO,CAACC,GAAG,CAACG,SAAS,CAACC,eAAe,CAACC,EAAE,CAAC,CAAC;IAC5C;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}