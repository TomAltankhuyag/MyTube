{"ast":null,"code":"import { mapState } from 'pinia';\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components';\nimport { usePlaylistStore } from '../store/playlist';\nimport { useSettingStore } from '../store/settings';\nimport { videoIdParser } from '../utility/video-id-parser';\nimport { fetchVideoInformation } from '../utility/youtube-video-validation';\nimport { YOUTUBE_API_CODES } from '../constants/constants';\nimport controller from '../utility/video-controller';\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      pauseSwitch: true,\n      key: 0,\n      userInput: ''\n    };\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0;\n    }\n  },\n  methods: {\n    onSubmit() {\n      if (this.userInput && this.userInput.replace(/\\s/g, '').length) {\n        const videoId = videoIdParser(this.userInput);\n        this.onVideoIdValidation(videoId);\n        this.userInput = '';\n      }\n    },\n    onPlayNext() {\n      const playStore = usePlaylistStore();\n      if (++this.key === playStore.currentPlaylist.length) this.key = 0;\n      playStore.changeCurrentSongInPlaylist(this.key);\n    },\n    onSyncPlaylist() {\n      const playStore = usePlaylistStore();\n      playStore.syncPlaylist();\n    },\n    onVideoIdValidation(videoId) {\n      if (!videoId) {\n        console.log('improper videoID');\n        return;\n      }\n      fetchVideoInformation(videoId).then(payload => {\n        if (payload.status === YOUTUBE_API_CODES.VALID) {\n          controller.playSongByInput(payload);\n        }\n      });\n    }\n  },\n  watch: {\n    pauseSwitch() {\n      const playStore = useSettingStore();\n      playStore.toggleAutopause();\n    }\n  }\n};","map":{"version":3,"names":["mapState","VTextField","VSwitch","VBtn","usePlaylistStore","useSettingStore","videoIdParser","fetchVideoInformation","YOUTUBE_API_CODES","controller","components","emits","data","pauseSwitch","key","userInput","computed","isCurrentPlaylistEmpty","currentPlaylist","length","methods","onSubmit","replace","videoId","onVideoIdValidation","onPlayNext","playStore","changeCurrentSongInPlaylist","onSyncPlaylist","syncPlaylist","console","log","then","payload","status","VALID","playSongByInput","watch","toggleAutopause"],"sources":["X:\\Coding\\MyTube\\src\\components\\YoutubeController.vue"],"sourcesContent":["<template lang=\"pug\">\r\n.youtube-configurator\r\n  .input-container\r\n    v-text-field(v-model=\"userInput\"\r\n      label='Enter a URL or video ID'\r\n      @keyup.enter=\"onSubmit\"\r\n      variant='solo'\r\n      hide-details=\"auto\").input-style\r\n    v-btn.add-style(@click=\"\") play\r\n    v-btn.add-style(@click=\"\") +\r\n  v-switch(v-model=\"pauseSwitch\"\r\n    label='Pause on load'\r\n    color='red'\r\n    :class=\"{activated: pauseSwitch}\").switch-style\r\n  .butonic-plague\r\n    v-btn(@click=\"onSyncPlaylist\").btn-style Sync Playlist\r\n    v-btn(@click=\"onPlayNext\" :disabled=\"isCurrentPlaylistEmpty\").btn-style Play Next\r\n\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'pinia'\r\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components'\r\nimport { usePlaylistStore } from '../store/playlist'\r\nimport { useSettingStore } from '../store/settings'\r\nimport { videoIdParser } from '../utility/video-id-parser'\r\nimport { fetchVideoInformation } from '../utility/youtube-video-validation'\r\nimport { YOUTUBE_API_CODES } from '../constants/constants'\r\nimport controller from '../utility/video-controller'\r\n\r\nexport default {\r\n  components: {\r\n    VTextField,\r\n    VSwitch,\r\n    VBtn\r\n  },\r\n  emits: ['toggle-switch', 'mouseleave'],\r\n  data() {\r\n    return {\r\n      pauseSwitch: true,\r\n      key: 0,\r\n      userInput: ''\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(useSettingStore, ['autopause']),\r\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\r\n\r\n    isCurrentPlaylistEmpty() {\r\n      return this.currentPlaylist.length === 0\r\n    }\r\n  },\r\n  methods: {\r\n    onSubmit() {\r\n      if (this.userInput && this.userInput.replace(/\\s/g, '').length) {\r\n        const videoId = videoIdParser(this.userInput)\r\n        this.onVideoIdValidation(videoId)\r\n        this.userInput = ''\r\n      }\r\n    },\r\n    onPlayNext() {\r\n      const playStore = usePlaylistStore()\r\n      if (++this.key === playStore.currentPlaylist.length) this.key = 0\r\n      playStore.changeCurrentSongInPlaylist(this.key)\r\n    },\r\n    onSyncPlaylist() {\r\n      const playStore = usePlaylistStore()\r\n      playStore.syncPlaylist()\r\n    },\r\n    onVideoIdValidation(videoId) {\r\n      if (!videoId) {\r\n        console.log('improper videoID');\r\n        return\r\n      }\r\n      fetchVideoInformation(videoId).then(payload => {\r\n        if (payload.status === YOUTUBE_API_CODES.VALID) {\r\n          controller.playSongByInput(payload)\r\n        }\r\n      })\r\n    }\r\n  },\r\n  watch: {\r\n    pauseSwitch() {\r\n      const playStore = useSettingStore()\r\n      playStore.toggleAutopause()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style></style>\r\n<style lang=\"scss\" scoped>\r\n@import 'src/styles/flex';\r\n\r\n$input-height : 50px;\r\n\r\n.youtube-configurator {\r\n  @include flex-column();\r\n  justify-content: space-between;\r\n  padding: 25px;\r\n\r\n\r\n  .input-container {\r\n    @include flex-row();\r\n    box-sizing: border-box;\r\n    padding: 10px;\r\n\r\n    .input-style {\r\n      width: 350px;\r\n      margin: 0 5px;\r\n    }\r\n\r\n    .add-style {\r\n      height: $input-height;\r\n    }\r\n  }\r\n\r\n  .btn-style {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .activated {\r\n    color: red;\r\n  }\r\n\r\n}\r\n</style>\r\n"],"mappings":"AAqBA,SAASA,QAAO,QAAS,OAAM;AAC/B,SAASC,UAAU,EAAEC,OAAO,EAAEC,IAAG,QAAS,oBAAmB;AAC7D,SAASC,gBAAe,QAAS,mBAAkB;AACnD,SAASC,eAAc,QAAS,mBAAkB;AAClD,SAASC,aAAY,QAAS,4BAA2B;AACzD,SAASC,qBAAoB,QAAS,qCAAoC;AAC1E,SAASC,iBAAgB,QAAS,wBAAuB;AACzD,OAAOC,UAAS,MAAO,6BAA4B;AAEnD,eAAe;EACbC,UAAU,EAAE;IACVT,UAAU;IACVC,OAAO;IACPC;EACF,CAAC;EACDQ,KAAK,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC;EACtCC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE,CAAC;MACNC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGhB,QAAQ,CAACK,eAAe,EAAE,CAAC,WAAW,CAAC,CAAC;IAC3C,GAAGL,QAAQ,CAACI,gBAAgB,EAAE,CAAC,iBAAiB,CAAC,CAAC;IAElDa,sBAAsBA,CAAA,EAAG;MACvB,OAAO,IAAI,CAACC,eAAe,CAACC,MAAK,KAAM;IACzC;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACN,SAAQ,IAAK,IAAI,CAACA,SAAS,CAACO,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACH,MAAM,EAAE;QAC9D,MAAMI,OAAM,GAAIjB,aAAa,CAAC,IAAI,CAACS,SAAS;QAC5C,IAAI,CAACS,mBAAmB,CAACD,OAAO;QAChC,IAAI,CAACR,SAAQ,GAAI,EAAC;MACpB;IACF,CAAC;IACDU,UAAUA,CAAA,EAAG;MACX,MAAMC,SAAQ,GAAItB,gBAAgB,CAAC;MACnC,IAAI,EAAE,IAAI,CAACU,GAAE,KAAMY,SAAS,CAACR,eAAe,CAACC,MAAM,EAAE,IAAI,CAACL,GAAE,GAAI;MAChEY,SAAS,CAACC,2BAA2B,CAAC,IAAI,CAACb,GAAG;IAChD,CAAC;IACDc,cAAcA,CAAA,EAAG;MACf,MAAMF,SAAQ,GAAItB,gBAAgB,CAAC;MACnCsB,SAAS,CAACG,YAAY,CAAC;IACzB,CAAC;IACDL,mBAAmBA,CAACD,OAAO,EAAE;MAC3B,IAAI,CAACA,OAAO,EAAE;QACZO,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B;MACF;MACAxB,qBAAqB,CAACgB,OAAO,CAAC,CAACS,IAAI,CAACC,OAAM,IAAK;QAC7C,IAAIA,OAAO,CAACC,MAAK,KAAM1B,iBAAiB,CAAC2B,KAAK,EAAE;UAC9C1B,UAAU,CAAC2B,eAAe,CAACH,OAAO;QACpC;MACF,CAAC;IACH;EACF,CAAC;EACDI,KAAK,EAAE;IACLxB,WAAWA,CAAA,EAAG;MACZ,MAAMa,SAAQ,GAAIrB,eAAe,CAAC;MAClCqB,SAAS,CAACY,eAAe,CAAC;IAC5B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}