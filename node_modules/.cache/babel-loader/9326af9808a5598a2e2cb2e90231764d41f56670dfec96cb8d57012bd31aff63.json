{"ast":null,"code":"import { mapState } from 'pinia';\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components';\nimport { usePlaylistStore } from '../store/playlist';\nimport { useSettingStore } from '../store/settings';\nimport { videoIdParser } from '../utility/video-id-parser';\nimport { fetchVideoInformation } from '../utility/youtube-video-validation';\nimport { YOUTUBE_API_CODES, controllerOptions, PLAY_NEXT } from '../constants/constants';\nimport { videoController } from '../utility/video-controller';\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      pauseSwitch: true,\n      key: 0,\n      userInput: '',\n      controllerOptions\n    };\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length;\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0;\n    }\n  },\n  methods: {\n    async processAction(ACTION) {\n      if (ACTION === PLAY_NEXT) {\n        videoController[PLAY_NEXT]();\n        return;\n      }\n      if (!this.hasInput) {\n        console.warn('no input');\n        return;\n      }\n      const userInput = this.userInput;\n      this.userInput = '';\n      const payload = await this.processUserInput(userInput);\n      if (payload.status === YOUTUBE_API_CODES.VALID) {\n        videoController[ACTION](payload);\n      }\n    },\n    async fetchVideoInfo(videoId) {\n      const payload = await fetchVideoInformation(videoId);\n      return payload;\n    },\n    onPlayNext() {\n      const playStore = usePlaylistStore();\n      if (++this.key === playStore.currentPlaylist.length) this.key = 0;\n      playStore.changeCurrentSongInPlaylist(this.key);\n    },\n    onSyncPlaylist() {\n      const playStore = usePlaylistStore();\n      playStore.syncPlaylist();\n    },\n    async processUserInput(userInput) {\n      const videoId = videoIdParser(userInput);\n      if (!videoId) {\n        console.warn('improper videoId');\n        return null;\n      }\n      const payload = await this.fetchVideoInfo(videoId);\n      return payload;\n    }\n  },\n  watch: {\n    pauseSwitch() {\n      const playStore = useSettingStore();\n      playStore.toggleAutopause();\n    }\n  }\n};","map":{"version":3,"names":["mapState","VTextField","VSwitch","VBtn","usePlaylistStore","useSettingStore","videoIdParser","fetchVideoInformation","YOUTUBE_API_CODES","controllerOptions","PLAY_NEXT","videoController","components","emits","data","pauseSwitch","key","userInput","computed","hasInput","replace","length","isCurrentPlaylistEmpty","currentPlaylist","methods","processAction","ACTION","console","warn","payload","processUserInput","status","VALID","fetchVideoInfo","videoId","onPlayNext","playStore","changeCurrentSongInPlaylist","onSyncPlaylist","syncPlaylist","watch","toggleAutopause"],"sources":["X:\\Coding\\MyTube\\src\\components\\YoutubeController.vue"],"sourcesContent":["<template lang=\"pug\">\n.youtube-configurator\n  .input-container\n    v-text-field(v-model=\"userInput\"\n                 label='Enter a URL or video ID'\n                 @keyup.enter=\"processAction(controllerOptions.PLAY_NOW)\"\n                 variant='solo'\n                 hide-details=\"auto\").input-style\n    v-btn.add-style(@click=\"processAction(controllerOptions.QUEUE)\") Queue\n  v-switch(v-model=\"pauseSwitch\"\n           label='Pause on load'\n           color='red'\n           :class=\"{activated: pauseSwitch}\").switch-style\n  .butonic-plague\n    v-btn(@click=\"onSyncPlaylist\").btn-style Sync Playlist\n    v-btn(@click=\"processAction(controllerOptions.PLAY_NEXT)\" :disabled=\"isCurrentPlaylistEmpty\").btn-style Play Next\n\n</template>\n\n<script>\nimport { mapState } from 'pinia'\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components'\nimport { usePlaylistStore } from '../store/playlist'\nimport { useSettingStore } from '../store/settings'\nimport { videoIdParser } from '../utility/video-id-parser'\nimport { fetchVideoInformation } from '../utility/youtube-video-validation'\nimport { YOUTUBE_API_CODES, controllerOptions, PLAY_NEXT } from '../constants/constants'\nimport {videoController} from '../utility/video-controller'\n\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      pauseSwitch: true,\n      key: 0,\n      userInput: '',\n      controllerOptions\n    }\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0\n    }\n  },\n  methods: {\n    async processAction(ACTION) {\n      if (ACTION === PLAY_NEXT) {\n        videoController[PLAY_NEXT]()\n        return\n      }\n      if (!this.hasInput) {\n        console.warn('no input')\n        return\n      }\n      const userInput = this.userInput\n      this.userInput = ''\n      const payload = await this.processUserInput(userInput)\n      if (payload.status === YOUTUBE_API_CODES.VALID) {\n        videoController[ACTION](payload)\n      }\n    },\n    async fetchVideoInfo(videoId) {\n      const payload = await fetchVideoInformation(videoId)\n      return payload\n    },\n    onPlayNext() {\n      const playStore = usePlaylistStore()\n      if (++this.key === playStore.currentPlaylist.length) this.key = 0\n      playStore.changeCurrentSongInPlaylist(this.key)\n    },\n    onSyncPlaylist() {\n      const playStore = usePlaylistStore()\n      playStore.syncPlaylist()\n    },\n    async processUserInput(userInput) {\n      const videoId = videoIdParser(userInput)\n      if (!videoId) {\n        console.warn('improper videoId')\n        return null\n      }\n      const payload = await this.fetchVideoInfo(videoId)\n      return payload\n    }\n  },\n  watch: {\n    pauseSwitch() {\n      const playStore = useSettingStore()\n      playStore.toggleAutopause()\n    }\n  }\n}\n</script>\n<style></style>\n<style lang=\"scss\" scoped>\n@import 'src/styles/flex';\n\n$input-height : 50px;\n\n.youtube-configurator {\n  @include flex-column();\n  justify-content: space-between;\n  padding: 25px;\n\n\n  .input-container {\n    @include flex-row();\n    box-sizing: border-box;\n    padding: 10px;\n\n    .input-style {\n      width: 350px;\n      margin: 0 5px;\n    }\n\n    .add-style {\n      height: $input-height;\n    }\n  }\n\n  .btn-style {\n    margin-bottom: 10px;\n  }\n\n  .activated {\n    color: red;\n  }\n\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}