{"ast":null,"code":"import YoutubeVideo from './components/YoutubeVideo.vue';\nimport YoutubeController from './components/YoutubeController.vue';\nimport DebugPanel from './components/DebugPanel.vue';\nimport QueueList from './components/QueueList.vue';\nimport { usePlaylistStore } from './store/playlist';\nimport { VSwitch } from 'vuetify/components';\nimport { mapState } from 'pinia';\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeController,\n    DebugPanel,\n    VSwitch,\n    QueueList\n  },\n  data() {\n    return {\n      isDebuggerOn: false,\n      isPlaylistOn: true\n    };\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentSong'])\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input);\n      fetchVideoInformation(videoId).then(status => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.onValidIdSubmission( /*  TODO   */);\n          this.videoId = videoId;\n        }\n      });\n    },\n    onValidIdSubmission(videoId) {\n      //TODO fetchVideoInformation should return a payload of information including videoId, name, Channel\n      // see youtube-video-validation.js\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentSong']),\n    videoId() {\n      return this.currentSong.videoId;\n    }\n  }\n};","map":{"version":3,"names":["YoutubeVideo","YoutubeController","DebugPanel","QueueList","usePlaylistStore","VSwitch","mapState","name","components","data","isDebuggerOn","isPlaylistOn","computed","methods","onSubmit","input","videoId","videoIdParser","fetchVideoInformation","then","status","YOUTUBE_API_CODES","VALID","onValidIdSubmission","currentSong"],"sources":["X:\\Coding\\MyTube\\src\\App.vue"],"sourcesContent":["<template lang=\"pug\">\n#app.app\n  .youtube-app-container\n    youtube-controller.controller\n    h3 {{ currentSong.name }}\n    youtube-video(:videoId=\"videoId\").video\n    v-switch(v-model=\"isDebuggerOn\"\n             label=\"debugger\"\n             color=\"red\"\n             :class=\"{activated: isDebuggerOn}\").switch-style\n    v-switch(v-model=\"isPlaylistOn\"\n             label=\"playlist\"\n             color=\"red\"\n             :class=\"{activated: isPlaylistOn}\").switch-style\n    queue-list(v-if=\"isPlaylistOn\")\n    debug-panel(v-if=\"isDebuggerOn\")\n</template>\n\n<script>\nimport YoutubeVideo from './components/YoutubeVideo.vue'\nimport YoutubeController from './components/YoutubeController.vue'\nimport DebugPanel from './components/DebugPanel.vue'\nimport QueueList from './components/QueueList.vue'\nimport { usePlaylistStore } from './store/playlist'\nimport { VSwitch } from 'vuetify/components'\nimport { mapState } from 'pinia'\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeController,\n    DebugPanel,\n    VSwitch,\n    QueueList\n  },\n  data() {\n    return {\n      isDebuggerOn: false,\n      isPlaylistOn: true\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentSong']),\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input)\n      fetchVideoInformation(videoId).then((status) => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.onValidIdSubmission(/*  TODO   */)\n          this.videoId = videoId\n        }\n      })\n    },\n    onValidIdSubmission(videoId) {\n      //TODO fetchVideoInformation should return a payload of information including videoId, name, Channel\n      // see youtube-video-validation.js\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentSong']),\n\n    videoId() {\n      return this.currentSong.videoId\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'src/styles/flex';\n\n.youtube-app-container {\n  background-color: black;\n  @include flex-column();\n\n  .controller {\n    margin-bottom: 30px;\n  }\n\n  .video {\n    margin: 15px;\n  }\n}\n\n.switch-style {\n  color: red;\n  font-family: copperplate;\n\n  &.activated {\n    color: blue;\n    font-family: papyrus;\n  }\n}\n\n.youtube-app-container {\n  @include flex-column();\n}\n</style>\n<style lang=\"scss\">\n// * {\n//   background-image: url('assets/images/pinkStreets.jpg');\n//   background-size: cover;\n//   // background-repeat: no-repeat, repeat;\n//   background-attachment: fixed;\n// }\n</style>\n"],"mappings":"AAmBA,OAAOA,YAAW,MAAO,+BAA8B;AACvD,OAAOC,iBAAgB,MAAO,oCAAmC;AACjE,OAAOC,UAAS,MAAO,6BAA4B;AACnD,OAAOC,SAAQ,MAAO,4BAA2B;AACjD,SAASC,gBAAe,QAAS,kBAAiB;AAClD,SAASC,OAAM,QAAS,oBAAmB;AAC3C,SAASC,QAAO,QAAS,OAAM;AAC/B,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVR,YAAY;IACZC,iBAAiB;IACjBC,UAAU;IACVG,OAAO;IACPF;EACF,CAAC;EACDM,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAACF,gBAAgB,EAAE,CAAC,aAAa,CAAC;EAC/C,CAAC;EACDS,OAAO,EAAE;IACPC,QAAQA,CAACC,KAAK,EAAE;MACd,MAAMC,OAAM,GAAIC,aAAa,CAACF,KAAK;MACnCG,qBAAqB,CAACF,OAAO,CAAC,CAACG,IAAI,CAAEC,MAAM,IAAK;QAC9C,IAAIA,MAAK,KAAMC,iBAAiB,CAACC,KAAK,EAAE;UACtC,IAAI,CAACC,mBAAmB,CAAc,CAAb,cAAa;UACtC,IAAI,CAACP,OAAM,GAAIA,OAAM;QACvB;MACF,CAAC;IACH,CAAC;IACDO,mBAAmBA,CAACP,OAAO,EAAE;MAC3B;MACA;IAAA;EAEJ,CAAC;EACDJ,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAACF,gBAAgB,EAAE,CAAC,aAAa,CAAC,CAAC;IAE9CY,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACQ,WAAW,CAACR,OAAM;IAChC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}