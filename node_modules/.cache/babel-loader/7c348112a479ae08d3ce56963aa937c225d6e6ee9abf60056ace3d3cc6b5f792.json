{"ast":null,"code":"export const actions = {\n  loadSongByindex(index = 0) {\n    if (this.currentPlaylist.length === 0) {\n      console.log('out of songs!');\n      return;\n    }\n    this.currentSong = this.currentPlaylist[index];\n  },\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.log('no playlists ):');\n      return;\n    }\n    this.currentPlaylist = this.playlists[index].playlist;\n    console.log(this.currentPlaylist);\n  },\n  playNextSong() {\n    if (this.currentPlaylist.length === 0) {\n      console.log('out of songs!');\n      return;\n    }\n    this.removeSongByVideoId();\n  },\n  removeSongByVideoId(videoId = 'Qaar0K5ThcM') {\n    const song = this.currentPlaylist.find(song => song.videoId === videoId);\n    const index = this.currentPlaylist.indexOf(song);\n    this.currentPlaylist.splice(index, 1);\n    console.log(song);\n    console.log(index);\n    console.log(this.currentPlaylist);\n  }\n};","map":{"version":3,"names":["actions","loadSongByindex","index","currentPlaylist","length","console","log","currentSong","syncPlaylist","playlists","playlist","playNextSong","removeSongByVideoId","videoId","song","find","indexOf","splice"],"sources":["X:/Coding/MyTube/src/store/playlist/actions.js"],"sourcesContent":["export const actions = {\n  loadSongByindex(index = 0) {\n    if (this.currentPlaylist.length === 0) {\n      console.log('out of songs!')\n      return\n    }\n    this.currentSong = this.currentPlaylist[index]\n  },\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.log('no playlists ):')\n      return\n    }\n    this.currentPlaylist = this.playlists[index].playlist\n    console.log(this.currentPlaylist)\n  },\n  playNextSong() {\n    if (this.currentPlaylist.length === 0) {\n      console.log('out of songs!')\n      return\n    }\n\n    this.removeSongByVideoId()\n\n  },\n  removeSongByVideoId(videoId = 'Qaar0K5ThcM') {\n\n    const song = this.currentPlaylist.find(song => song.videoId === videoId)\n    const index = this.currentPlaylist.indexOf(song)\n    this.currentPlaylist.splice(index, 1)\n    console.log(song)\n    console.log(index)\n    console.log(this.currentPlaylist);\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACrBC,eAAeA,CAACC,KAAK,GAAG,CAAC,EAAE;IACzB,IAAI,IAAI,CAACC,eAAe,CAACC,MAAM,KAAK,CAAC,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B;IACF;IACA,IAAI,CAACC,WAAW,GAAG,IAAI,CAACJ,eAAe,CAACD,KAAK,CAAC;EAChD,CAAC;EACDM,YAAYA,CAACN,KAAK,GAAG,CAAC,EAAE;IACtB,IAAI,IAAI,CAACO,SAAS,CAACL,MAAM,KAAK,CAAC,EAAE;MAC/BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;IACF;IACA,IAAI,CAACH,eAAe,GAAG,IAAI,CAACM,SAAS,CAACP,KAAK,CAAC,CAACQ,QAAQ;IACrDL,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,eAAe,CAAC;EACnC,CAAC;EACDQ,YAAYA,CAAA,EAAG;IACb,IAAI,IAAI,CAACR,eAAe,CAACC,MAAM,KAAK,CAAC,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B;IACF;IAEA,IAAI,CAACM,mBAAmB,CAAC,CAAC;EAE5B,CAAC;EACDA,mBAAmBA,CAACC,OAAO,GAAG,aAAa,EAAE;IAE3C,MAAMC,IAAI,GAAG,IAAI,CAACX,eAAe,CAACY,IAAI,CAACD,IAAI,IAAIA,IAAI,CAACD,OAAO,KAAKA,OAAO,CAAC;IACxE,MAAMX,KAAK,GAAG,IAAI,CAACC,eAAe,CAACa,OAAO,CAACF,IAAI,CAAC;IAChD,IAAI,CAACX,eAAe,CAACc,MAAM,CAACf,KAAK,EAAE,CAAC,CAAC;IACrCG,OAAO,CAACC,GAAG,CAACQ,IAAI,CAAC;IACjBT,OAAO,CAACC,GAAG,CAACJ,KAAK,CAAC;IAClBG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,eAAe,CAAC;EACnC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}