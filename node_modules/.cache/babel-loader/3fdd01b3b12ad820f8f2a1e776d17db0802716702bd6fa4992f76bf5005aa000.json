{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { START_SONG_INDEX } from \"../../constants/constants\";\nexport const actions = {\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.warn('no playlists ):');\n      return;\n    }\n    // Initialize both user and hidden playlist\n    this.currentPlaylist = this.playlists[index].playlist;\n    this.internalPlaylist = this.currentPlaylist;\n    if (!this.currentSong.videoId) {\n      const songIndex = getRandomInt(0, this.currentPlaylist.length);\n      this.changeCurrentSongInPlaylist(songIndex);\n    }\n  },\n  changeCurrentSongInPlaylist(index = START_SONG_INDEX) {\n    if (this.currentPlaylist.length === 0) {\n      console.warn('out of songs!');\n      return;\n    }\n    const song = this.currentPlaylist[index];\n    this.currentSong = song;\n  },\n  changeCurrentSongBySong(song) {\n    if (Object.keys(song).length === 0) {\n      console.warn('no song provided');\n    }\n    this.currentSong = song;\n  },\n  removeSongByVideoId(videoId) {\n    const song = this.currentPlaylist.find(song => song.videoId === videoId);\n    const index = this.currentPlaylist.indexOf(song);\n    if (index >= 0) {\n      this.currentPlaylist.splice(index, 1);\n    }\n  },\n  addSongToEnd(song) {\n    this.currentPlaylist.push(song);\n  },\n  addSongToFirst(song) {\n    this.currentPlaylist.unshift(song);\n  },\n  test() {\n    console.log('asdidahdashdi');\n  }\n};\n// min - Inclusive\n// max - Exclusive\nfunction getRandomInt(min = 0, max) {\n  if (!max) {\n    console.warn('max warning');\n  }\n  return Math.floor(Math.random() * (max - min) + min);\n}","map":{"version":3,"names":["START_SONG_INDEX","actions","syncPlaylist","index","playlists","length","console","warn","currentPlaylist","playlist","internalPlaylist","currentSong","videoId","songIndex","getRandomInt","changeCurrentSongInPlaylist","song","changeCurrentSongBySong","Object","keys","removeSongByVideoId","find","indexOf","splice","addSongToEnd","push","addSongToFirst","unshift","test","log","min","max","Math","floor","random"],"sources":["X:/Coding/MyTube/src/store/playlist/actions.js"],"sourcesContent":["import { START_SONG_INDEX } from \"../../constants/constants\"\r\n\r\nexport const actions = {\r\n  syncPlaylist(index = 0) {\r\n    if (this.playlists.length === 0) {\r\n      console.warn('no playlists ):')\r\n      return\r\n    }\r\n    // Initialize both user and hidden playlist\r\n    this.currentPlaylist = this.playlists[index].playlist\r\n    this.internalPlaylist = this.currentPlaylist\r\n\r\n    if (!this.currentSong.videoId) {\r\n      const songIndex = getRandomInt(0, this.currentPlaylist.length)\r\n      this.changeCurrentSongInPlaylist(songIndex)\r\n    }\r\n  },\r\n  changeCurrentSongInPlaylist(index = START_SONG_INDEX) {\r\n    if (this.currentPlaylist.length === 0) {\r\n      console.warn('out of songs!')\r\n      return\r\n    }\r\n    const song = this.currentPlaylist[index]\r\n    this.currentSong = song\r\n  },\r\n  changeCurrentSongBySong(song) {\r\n    if (Object.keys(song).length === 0) {\r\n      console.warn('no song provided')\r\n    }\r\n    this.currentSong = song\r\n  },\r\n  removeSongByVideoId(videoId) {\r\n    const song = this.currentPlaylist.find(song => song.videoId === videoId)\r\n    const index = this.currentPlaylist.indexOf(song)\r\n    if (index >= 0) {\r\n      this.currentPlaylist.splice(index, 1)\r\n    }\r\n  },\r\n  addSongToEnd(song) {\r\n    this.currentPlaylist.push(song)\r\n  },\r\n  addSongToFirst(song) {\r\n    this.currentPlaylist.unshift(song)\r\n  },\r\n  test(){\r\n    console.log('asdidahdashdi');\r\n  }\r\n}\r\n// min - Inclusive\r\n// max - Exclusive\r\nfunction getRandomInt(min = 0, max) {\r\n  if (!max) {\r\n    console.warn('max warning')\r\n  }\r\n  return Math.floor(Math.random() * (max - min) + min)\r\n}\r\n"],"mappings":";AAAA,SAASA,gBAAgB,QAAQ,2BAA2B;AAE5D,OAAO,MAAMC,OAAO,GAAG;EACrBC,YAAYA,CAACC,KAAK,GAAG,CAAC,EAAE;IACtB,IAAI,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC/BC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;MAC/B;IACF;IACA;IACA,IAAI,CAACC,eAAe,GAAG,IAAI,CAACJ,SAAS,CAACD,KAAK,CAAC,CAACM,QAAQ;IACrD,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACF,eAAe;IAE5C,IAAI,CAAC,IAAI,CAACG,WAAW,CAACC,OAAO,EAAE;MAC7B,MAAMC,SAAS,GAAGC,YAAY,CAAC,CAAC,EAAE,IAAI,CAACN,eAAe,CAACH,MAAM,CAAC;MAC9D,IAAI,CAACU,2BAA2B,CAACF,SAAS,CAAC;IAC7C;EACF,CAAC;EACDE,2BAA2BA,CAACZ,KAAK,GAAGH,gBAAgB,EAAE;IACpD,IAAI,IAAI,CAACQ,eAAe,CAACH,MAAM,KAAK,CAAC,EAAE;MACrCC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;MAC7B;IACF;IACA,MAAMS,IAAI,GAAG,IAAI,CAACR,eAAe,CAACL,KAAK,CAAC;IACxC,IAAI,CAACQ,WAAW,GAAGK,IAAI;EACzB,CAAC;EACDC,uBAAuBA,CAACD,IAAI,EAAE;IAC5B,IAAIE,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC,CAACX,MAAM,KAAK,CAAC,EAAE;MAClCC,OAAO,CAACC,IAAI,CAAC,kBAAkB,CAAC;IAClC;IACA,IAAI,CAACI,WAAW,GAAGK,IAAI;EACzB,CAAC;EACDI,mBAAmBA,CAACR,OAAO,EAAE;IAC3B,MAAMI,IAAI,GAAG,IAAI,CAACR,eAAe,CAACa,IAAI,CAACL,IAAI,IAAIA,IAAI,CAACJ,OAAO,KAAKA,OAAO,CAAC;IACxE,MAAMT,KAAK,GAAG,IAAI,CAACK,eAAe,CAACc,OAAO,CAACN,IAAI,CAAC;IAChD,IAAIb,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACK,eAAe,CAACe,MAAM,CAACpB,KAAK,EAAE,CAAC,CAAC;IACvC;EACF,CAAC;EACDqB,YAAYA,CAACR,IAAI,EAAE;IACjB,IAAI,CAACR,eAAe,CAACiB,IAAI,CAACT,IAAI,CAAC;EACjC,CAAC;EACDU,cAAcA,CAACV,IAAI,EAAE;IACnB,IAAI,CAACR,eAAe,CAACmB,OAAO,CAACX,IAAI,CAAC;EACpC,CAAC;EACDY,IAAIA,CAAA,EAAE;IACJtB,OAAO,CAACuB,GAAG,CAAC,eAAe,CAAC;EAC9B;AACF,CAAC;AACD;AACA;AACA,SAASf,YAAYA,CAACgB,GAAG,GAAG,CAAC,EAAEC,GAAG,EAAE;EAClC,IAAI,CAACA,GAAG,EAAE;IACRzB,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;EAC7B;EACA,OAAOyB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}