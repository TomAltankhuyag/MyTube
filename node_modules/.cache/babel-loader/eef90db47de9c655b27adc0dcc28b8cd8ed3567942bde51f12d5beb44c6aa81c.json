{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  console.log(chosenString.length);\n  if (isValidYoutubeUrl(chosenString)) {\n    console.log('bro?');\n    const videoId = getVideoIdParam(chosenString);\n    return videoId;\n  } else if (chosenString.length === VIDEO_ID_SIZE) {\n    return chosenString;\n  } else {\n    return EMPTY;\n  }\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl;\n    }\n    const youtubeURLObject = new URL(youtubeUrl);\n    const hostname = youtubeURLObject.hostname;\n    let validUrl = false;\n    filterStrings.every(domainName => {\n      if (hostname === domainName) {\n        validUrl = true;\n        return false;\n      }\n    });\n    console.log(validUrl);\n    return validUrl;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","console","log","length","isValidYoutubeUrl","videoId","getVideoIdParam","urlString","url","includes","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","validUrl","every","domainName","e","hasTopLevelDomain","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  console.log(chosenString.length);\n  if (isValidYoutubeUrl(chosenString)) {\n    console.log('bro?');\n    const videoId = getVideoIdParam(chosenString)\n    return videoId\n  }\n  else if (chosenString.length === VIDEO_ID_SIZE) {\n    return chosenString\n  }\n  else {\n    return EMPTY\n  }\n}\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  return videoId\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n    try {\n      const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n\n      let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n      const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n      if (!youtubeUrl.includes(HTTPS)) {\n        youtubeUrl = HTTPS + youtubeUrl\n      }\n      const youtubeURLObject = new URL(youtubeUrl)\n\n      const hostname = youtubeURLObject.hostname\n      let validUrl = false\n      filterStrings.every((domainName) => {\n        if (hostname === domainName) {\n          validUrl = true\n          return false\n        }\n      })\n      console.log(validUrl);\n      return validUrl\n    } catch (e) {\n      return false\n    }\n\n}\n\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg')\n    || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,aAAa,EAAEC,GAAG,EAAEC,KAAK,QAAQ,wBAAwB;;AAEzE;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,YAAY,EAAE;EAC1CC,OAAO,CAACC,GAAG,CAACF,YAAY,CAACG,MAAM,CAAC;EAChC,IAAIC,iBAAiB,CAACJ,YAAY,CAAC,EAAE;IACnCC,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;IACnB,MAAMG,OAAO,GAAGC,eAAe,CAACN,YAAY,CAAC;IAC7C,OAAOK,OAAO;EAChB,CAAC,MACI,IAAIL,YAAY,CAACG,MAAM,KAAKP,aAAa,EAAE;IAC9C,OAAOI,YAAY;EACrB,CAAC,MACI;IACH,OAAOL,KAAK;EACd;AACF;AAEA,SAASW,eAAeA,CAACC,SAAS,EAAE;EAClC,IAAIC,GAAG,GAAGD,SAAS;EACnB,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACZ,GAAG,CAAC,EAAE;IACtBW,GAAG,GAAGX,GAAG,GAAGW,GAAG;EACjB;EACA,IAAI,CAACA,GAAG,CAACC,QAAQ,CAACX,KAAK,CAAC,EAAE;IACxBU,GAAG,GAAGV,KAAK,GAAGU,GAAG;EACnB;EAEA,MAAME,MAAM,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC,CAACI,YAAY;EAExC,MAAMP,OAAO,GAAGK,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAC/B,OAAOR,OAAO;AAChB;;AAEA;AACA,eAAeD,iBAAiBA,CAACG,SAAS,EAAE;EACxC,IAAI;IACF,MAAMO,KAAK,GAAGP,SAAS,CAACE,QAAQ,CAACZ,GAAG,CAAC,GAAGU,SAAS,CAACQ,OAAO,CAAClB,GAAG,CAAC,GAAGA,GAAG,CAACM,MAAM,GAAG,CAAC;IAE/E,IAAIa,UAAU,GAAGT,SAAS,CAACU,SAAS,CAACH,KAAK,EAAEP,SAAS,CAACQ,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC,CAAC;IAC1E,MAAMI,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;IAElE,IAAI,CAACF,UAAU,CAACP,QAAQ,CAACX,KAAK,CAAC,EAAE;MAC/BkB,UAAU,GAAGlB,KAAK,GAAGkB,UAAU;IACjC;IACA,MAAMG,gBAAgB,GAAG,IAAIR,GAAG,CAACK,UAAU,CAAC;IAE5C,MAAMI,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ;IAC1C,IAAIC,QAAQ,GAAG,KAAK;IACpBH,aAAa,CAACI,KAAK,CAAEC,UAAU,IAAK;MAClC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;QAC3BF,QAAQ,GAAG,IAAI;QACf,OAAO,KAAK;MACd;IACF,CAAC,CAAC;IACFpB,OAAO,CAACC,GAAG,CAACmB,QAAQ,CAAC;IACrB,OAAOA,QAAQ;EACjB,CAAC,CAAC,OAAOG,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AAEJ;AAEA,SAASC,iBAAiBA,CAACC,MAAM,EAAE;EACjC,OAAOA,MAAM,CAACjB,QAAQ,CAAC,MAAM,CAAC,IAAIiB,MAAM,CAACjB,QAAQ,CAAC,KAAK,CAAC,IAAIiB,MAAM,CAACjB,QAAQ,CAAC,MAAM,CAAC,IAAIiB,MAAM,CAACjB,QAAQ,CAAC,KAAK,CAAC,IACxGiB,MAAM,CAACjB,QAAQ,CAAC,MAAM,CAAC,IAAIiB,MAAM,CAACjB,QAAQ,CAAC,MAAM,CAAC,IAAIiB,MAAM,CAACjB,QAAQ,CAAC,KAAK,CAAC,IAAIiB,MAAM,CAACjB,QAAQ,CAAC,MAAM,CAAC;AAC9G"},"metadata":{},"sourceType":"module","externalDependencies":[]}