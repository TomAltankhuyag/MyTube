{"ast":null,"code":"import { mapState } from 'pinia';\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components';\nimport { usePlaylistStore } from '../store/playlist';\nimport { useSettingStore } from '../store/settings';\nimport { videoIdParser, playlistIdParser } from '../utility/youtube-id-parser';\nimport { fetchVideoInformation, fetchPlaylistInformation } from '../utility/youtube-video-validation';\nimport { YOUTUBE_API_CODES, controllerOptions } from '../constants/constants';\nimport { videoController } from '../utility/video-controller';\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      key: 0,\n      userInput: '',\n      controllerOptions\n    };\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length;\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0;\n    }\n  },\n  methods: {\n    async processAction(ACTION) {\n      const userInput = this.userInput;\n      this.userInput = '';\n      const payload = await this.processVideoInput(userInput);\n      if (payload && payload.status === YOUTUBE_API_CODES.VALID) {\n        videoController[ACTION](payload);\n      }\n    },\n    async onLoadPlaylist() {\n      if (!this.hasInput) {\n        console.warn('no input');\n        return;\n      }\n      const userInput = this.userInput;\n      this.userInput = '';\n      const playlistId = this.processPlaylistInput(userInput);\n      const payload = await fetchPlaylistInformation(playlistId);\n      if (payload.status === YOUTUBE_API_CODES.VALID) {\n        this.$store.playlist.loadPlaylistWithPayload(payload);\n      }\n    },\n    onSyncPlaylist() {\n      this.$store.playlist.syncPlaylist();\n    },\n    onPlayNext() {\n      videoController[controllerOptions.PLAY_NEXT]();\n    },\n    processPlaylistInput(userInput) {\n      const playlistId = playlistIdParser(userInput);\n      if (!playlistId) {\n        console.warn('INVALID INPUT');\n        return null;\n      }\n      return playlistId;\n    },\n    async processVideoInput(userInput) {\n      const videoId = videoIdParser(userInput);\n      if (!videoId) {\n        console.warn('improper videoId');\n        return null;\n      }\n      const payload = await fetchVideoInformation(videoId);\n      return payload;\n    },\n    onSwitchClick() {\n      this.$store.setting.toggleAutopause();\n    }\n  }\n};","map":{"version":3,"names":["mapState","VTextField","VSwitch","VBtn","usePlaylistStore","useSettingStore","videoIdParser","playlistIdParser","fetchVideoInformation","fetchPlaylistInformation","YOUTUBE_API_CODES","controllerOptions","videoController","components","emits","data","key","userInput","computed","hasInput","replace","length","isCurrentPlaylistEmpty","currentPlaylist","methods","processAction","ACTION","payload","processVideoInput","status","VALID","onLoadPlaylist","console","warn","playlistId","processPlaylistInput","$store","playlist","loadPlaylistWithPayload","onSyncPlaylist","syncPlaylist","onPlayNext","PLAY_NEXT","videoId","onSwitchClick","setting","toggleAutopause"],"sources":["X:\\Coding\\MyTube\\src\\components\\YoutubeController.vue"],"sourcesContent":["<template lang=\"pug\">\n.youtube-configurator\n  .input-container\n    v-text-field(v-model=\"userInput\"\n                 label='Enter a URL or video ID'\n                 @keyup.enter=\"processAction(controllerOptions.PLAY_NOW)\"\n                 color=\"purple\"\n                 clearable\n                 hide-details=\"auto\").input-style\n    .controller-buttons\n      v-btn.add-style(@click=\"onLoadPlaylist\").btn-style Play now\n      v-btn.add-style(@click=\"onLoadPlaylist\").btn-style Load Playlist\n      v-btn.add-style(@click=\"processAction(controllerOptions.QUEUE)\").btn-style Queue Song\n  v-switch(v-model=\"autopause\"\n           :label=\"autopause ? 'Autopause On' : 'Autopause Off'\"\n           :class=\"{activated: autopause}\"\n           @click=\"onSwitchClick\").switch-style\n  v-btn(@click=\"onSyncPlaylist\").btn-style Sync Playlist\n  v-btn(@click=\"onPlayNext\" :disabled=\"isCurrentPlaylistEmpty\").btn-style Play Next\n\n</template>\n\n<script>\nimport { mapState } from 'pinia'\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components'\nimport { usePlaylistStore } from '../store/playlist'\nimport { useSettingStore } from '../store/settings'\nimport { videoIdParser, playlistIdParser } from '../utility/youtube-id-parser'\nimport { fetchVideoInformation, fetchPlaylistInformation } from '../utility/youtube-video-validation'\nimport { YOUTUBE_API_CODES, controllerOptions } from '../constants/constants'\nimport {videoController} from '../utility/video-controller'\n\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      key: 0,\n      userInput: '',\n      controllerOptions\n    }\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0\n    }\n  },\n  methods: {\n    async processAction(ACTION) {\n      const userInput = this.userInput\n      this.userInput = ''\n      const payload = await this.processVideoInput(userInput)\n      if (payload && payload.status === YOUTUBE_API_CODES.VALID) {\n        videoController[ACTION](payload)\n      }\n    },\n    async onLoadPlaylist() {\n      if (!this.hasInput) {\n        console.warn('no input')\n        return\n      }\n      const userInput = this.userInput\n      this.userInput = ''\n      const playlistId = this.processPlaylistInput(userInput)\n      const payload = await fetchPlaylistInformation(playlistId)\n      if (payload.status === YOUTUBE_API_CODES.VALID) {\n        this.$store.playlist.loadPlaylistWithPayload(payload)\n      }\n    },\n    onSyncPlaylist() {\n      this.$store.playlist.syncPlaylist()\n    },\n    onPlayNext() {\n      videoController[controllerOptions.PLAY_NEXT]()\n    },\n     processPlaylistInput(userInput) {\n      const playlistId = playlistIdParser(userInput)\n      if (!playlistId) {\n        console.warn('INVALID INPUT')\n        return null\n      }\n      return playlistId\n    },\n    async processVideoInput(userInput) {\n      const videoId = videoIdParser(userInput)\n      if (!videoId) {\n        console.warn('improper videoId')\n        return null\n      }\n      const payload = await fetchVideoInformation(videoId)\n      return payload\n    },\n    onSwitchClick(){\n      this.$store.setting.toggleAutopause()\n    }\n  }\n}\n</script>\n<style></style>\n<style lang=\"scss\" scoped>\n@import 'src/styles/flex';\n\n$input-height : 50px;\n\n.youtube-configurator {\n  @include flex-column();\n  justify-content: space-between;\n  padding: 25px;\n\n\n  .input-container {\n    @include flex-column();\n    box-sizing: border-box;\n    margin: 50px 0;\n    padding: 10px;\n    @media screen and (min-width: 650px) {\n      @include flex-row();\n    }\n    .input-style {\n      width: 200px;\n      margin: 0 5px;\n      color: pink;\n      @media screen and (min-width: 650px) {\n        width: 350px;\n      }\n    }\n\n    .add-style {\n      height: $input-height;\n      width: 140px;\n    }\n\n\n  }\n  .switch-style {\n    color: green;\n    &.activated {\n      color: red;\n    }\n  }\n  .btn-style {\n    margin-bottom: 10px;\n    background-color: pink;\n    color: white;\n    :has(.controller-buttons)  {\n      @include flex-column();\n\n    }\n  }\n\n  // .activated {\n  //   color: red;\n  // }\n\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}