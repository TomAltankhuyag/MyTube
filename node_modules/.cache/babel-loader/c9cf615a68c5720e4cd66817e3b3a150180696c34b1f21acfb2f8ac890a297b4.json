{"ast":null,"code":"import { mapState } from 'pinia';\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components';\nimport { usePlaylistStore } from '../store/playlist';\nimport { useSettingStore } from '../store/settings';\nimport { videoIdParser } from '../utility/video-id-parser';\nimport { fetchVideoInformation } from '../utility/youtube-video-validation';\nimport { YOUTUBE_API_CODES } from '../constants/constants';\nimport controller from '../utility/video-controller';\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      pauseSwitch: true,\n      key: 0,\n      userInput: ''\n    };\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length;\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0;\n    }\n  },\n  methods: {\n    onSubmit() {\n      if (this.hasInput) {\n        const videoId = videoIdParser(this.userInput);\n        this.onVideoIdValidatison(videoId);\n        this.userInput = '';\n      }\n    },\n    onPlayNext() {\n      const playStore = usePlaylistStore();\n      if (++this.key === playStore.currentPlaylist.length) this.key = 0;\n      playStore.changeCurrentSongInPlaylist(this.key);\n    },\n    onSyncPlaylist() {\n      const playStore = usePlaylistStore();\n      playStore.syncPlaylist();\n    },\n    onVideoIdValidation(videoId) {\n      if (!videoId) {\n        console.warn('improper videoId');\n        return;\n      }\n      fetchVideoInformation(videoId).then(payload => {\n        if (payload.status === YOUTUBE_API_CODES.VALID) {\n          // controller.playSongByInput(payload)\n          controller.queueSong(payload);\n        }\n      });\n    }\n  },\n  watch: {\n    pauseSwitch() {\n      const playStore = useSettingStore();\n      playStore.toggleAutopause();\n    }\n  }\n};","map":{"version":3,"names":["mapState","VTextField","VSwitch","VBtn","usePlaylistStore","useSettingStore","videoIdParser","fetchVideoInformation","YOUTUBE_API_CODES","controller","components","emits","data","pauseSwitch","key","userInput","computed","hasInput","replace","length","isCurrentPlaylistEmpty","currentPlaylist","methods","onSubmit","videoId","onVideoIdValidatison","onPlayNext","playStore","changeCurrentSongInPlaylist","onSyncPlaylist","syncPlaylist","onVideoIdValidation","console","warn","then","payload","status","VALID","queueSong","watch","toggleAutopause"],"sources":["X:\\Coding\\MyTube\\src\\components\\YoutubeController.vue"],"sourcesContent":["<template lang=\"pug\">\n.youtube-configurator\n  .input-container\n    v-text-field(v-model=\"userInput\"\n                 label='Enter a URL or video ID'\n                 @keyup.enter=\"onSubmit\"\n                 variant='solo'\n                 hide-details=\"auto\").input-style\n    v-btn.add-style(@click=\"onSubmit\") button\n  v-switch(v-model=\"pauseSwitch\"\n           label='Pause on load'\n           color='red'\n           :class=\"{activated: pauseSwitch}\").switch-style\n  .butonic-plague\n    v-btn(@click=\"onSyncPlaylist\").btn-style Sync Playlist\n    v-btn(@click=\"onPlayNext\" :disabled=\"isCurrentPlaylistEmpty\").btn-style Play Next\n\n</template>\n\n<script>\nimport { mapState } from 'pinia'\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components'\nimport { usePlaylistStore } from '../store/playlist'\nimport { useSettingStore } from '../store/settings'\nimport { videoIdParser } from '../utility/video-id-parser'\nimport { fetchVideoInformation } from '../utility/youtube-video-validation'\nimport { YOUTUBE_API_CODES } from '../constants/constants'\nimport controller from '../utility/video-controller'\n\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      pauseSwitch: true,\n      key: 0,\n      userInput: ''\n    }\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0\n    }\n  },\n  methods: {\n    onSubmit() {\n      if (this.hasInput) {\n        const videoId = videoIdParser(this.userInput)\n        this.onVideoIdValidatison(videoId)\n        this.userInput = ''\n      }\n    },\n    onPlayNext() {\n      const playStore = usePlaylistStore()\n      if (++this.key === playStore.currentPlaylist.length) this.key = 0\n      playStore.changeCurrentSongInPlaylist(this.key)\n    },\n    onSyncPlaylist() {\n      const playStore = usePlaylistStore()\n      playStore.syncPlaylist()\n    },\n    onVideoIdValidation(videoId) {\n      if (!videoId) {\n        console.warn('improper videoId');\n        return\n      }\n      fetchVideoInformation(videoId).then(payload => {\n        if (payload.status === YOUTUBE_API_CODES.VALID) {\n          // controller.playSongByInput(payload)\n          controller.queueSong(payload)\n        }\n      })\n    }\n  },\n  watch: {\n    pauseSwitch() {\n      const playStore = useSettingStore()\n      playStore.toggleAutopause()\n    }\n  }\n}\n</script>\n<style></style>\n<style lang=\"scss\" scoped>\n@import 'src/styles/flex';\n\n$input-height : 50px;\n\n.youtube-configurator {\n  @include flex-column();\n  justify-content: space-between;\n  padding: 25px;\n\n\n  .input-container {\n    @include flex-row();\n    box-sizing: border-box;\n    padding: 10px;\n\n    .input-style {\n      width: 350px;\n      margin: 0 5px;\n    }\n\n    .add-style {\n      height: $input-height;\n    }\n  }\n\n  .btn-style {\n    margin-bottom: 10px;\n  }\n\n  .activated {\n    color: red;\n  }\n\n}\n</style>\n"],"mappings":"AAoBA,SAASA,QAAO,QAAS,OAAM;AAC/B,SAASC,UAAU,EAAEC,OAAO,EAAEC,IAAG,QAAS,oBAAmB;AAC7D,SAASC,gBAAe,QAAS,mBAAkB;AACnD,SAASC,eAAc,QAAS,mBAAkB;AAClD,SAASC,aAAY,QAAS,4BAA2B;AACzD,SAASC,qBAAoB,QAAS,qCAAoC;AAC1E,SAASC,iBAAgB,QAAS,wBAAuB;AACzD,OAAOC,UAAS,MAAO,6BAA4B;AAEnD,eAAe;EACbC,UAAU,EAAE;IACVT,UAAU;IACVC,OAAO;IACPC;EACF,CAAC;EACDQ,KAAK,EAAE,CAAC,eAAe,EAAE,YAAY,CAAC;EACtCC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,WAAW,EAAE,IAAI;MACjBC,GAAG,EAAE,CAAC;MACNC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGhB,QAAQ,CAACK,eAAe,EAAE,CAAC,WAAW,CAAC,CAAC;IAC3C,GAAGL,QAAQ,CAACI,gBAAgB,EAAE,CAAC,iBAAiB,CAAC,CAAC;IAClDa,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACF,SAAQ,IAAK,IAAI,CAACA,SAAS,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,MAAK;IAClE,CAAC;IACDC,sBAAsBA,CAAA,EAAG;MACvB,OAAO,IAAI,CAACC,eAAe,CAACF,MAAK,KAAM;IACzC;EACF,CAAC;EACDG,OAAO,EAAE;IACPC,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACN,QAAQ,EAAE;QACjB,MAAMO,OAAM,GAAIlB,aAAa,CAAC,IAAI,CAACS,SAAS;QAC5C,IAAI,CAACU,oBAAoB,CAACD,OAAO;QACjC,IAAI,CAACT,SAAQ,GAAI,EAAC;MACpB;IACF,CAAC;IACDW,UAAUA,CAAA,EAAG;MACX,MAAMC,SAAQ,GAAIvB,gBAAgB,CAAC;MACnC,IAAI,EAAE,IAAI,CAACU,GAAE,KAAMa,SAAS,CAACN,eAAe,CAACF,MAAM,EAAE,IAAI,CAACL,GAAE,GAAI;MAChEa,SAAS,CAACC,2BAA2B,CAAC,IAAI,CAACd,GAAG;IAChD,CAAC;IACDe,cAAcA,CAAA,EAAG;MACf,MAAMF,SAAQ,GAAIvB,gBAAgB,CAAC;MACnCuB,SAAS,CAACG,YAAY,CAAC;IACzB,CAAC;IACDC,mBAAmBA,CAACP,OAAO,EAAE;MAC3B,IAAI,CAACA,OAAO,EAAE;QACZQ,OAAO,CAACC,IAAI,CAAC,kBAAkB,CAAC;QAChC;MACF;MACA1B,qBAAqB,CAACiB,OAAO,CAAC,CAACU,IAAI,CAACC,OAAM,IAAK;QAC7C,IAAIA,OAAO,CAACC,MAAK,KAAM5B,iBAAiB,CAAC6B,KAAK,EAAE;UAC9C;UACA5B,UAAU,CAAC6B,SAAS,CAACH,OAAO;QAC9B;MACF,CAAC;IACH;EACF,CAAC;EACDI,KAAK,EAAE;IACL1B,WAAWA,CAAA,EAAG;MACZ,MAAMc,SAAQ,GAAItB,eAAe,CAAC;MAClCsB,SAAS,CAACa,eAAe,CAAC;IAC5B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}