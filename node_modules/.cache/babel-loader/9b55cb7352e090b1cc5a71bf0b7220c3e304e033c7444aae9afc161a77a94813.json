{"ast":null,"code":"export function videoIdParser(chosenString = 'www.youtube.com/watch?jo=123&v=titties&pp=32', opts = {}) {\n  // not a URL\n  if (!chosenString.includes('.com')) {\n    return chosenString;\n  }\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  // lord forgive me\n  const WWW = 'www.';\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift));\n  if (!youtubeUrl.includes('https://')) {\n    youtubeUrl = 'https://' + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domain => {\n    if (hostname === domain) {\n      validUrl = true;\n      return false;\n    }\n  });\n  if (!validUrl) {\n    console.log('not a certified youtube link');\n  }\n  const params = new URLSearchParams(chosenString);\n  const videoId = params.get('v');\n  console.log(videoId);\n  if (!videoId) {\n    console.log('no v=');\n  }\n  return videoId;\n}\nexport default {\n  videoIdParser\n};","map":{"version":3,"names":["videoIdParser","chosenString","opts","includes","filterStrings","WWW","shift","indexOf","length","youtubeUrl","substring","youtubeURLObject","URL","hostname","validUrl","every","domain","console","log","params","URLSearchParams","videoId","get"],"sources":["X:/Coding/MyTube/src/utility/parser/video-id-parser.js"],"sourcesContent":["export function videoIdParser(chosenString = 'www.youtube.com/watch?jo=123&v=titties&pp=32', opts = {}) {\n  // not a URL\n  if (!chosenString.includes('.com')) {\n    return chosenString\n  }\n\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n  // lord forgive me\n  const WWW = 'www.'\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift))\n\n  if (!youtubeUrl.includes('https://')) {\n    youtubeUrl = 'https://' + youtubeUrl\n  }\n  const youtubeURLObject = new URL(youtubeUrl)\n\n  const hostname = youtubeURLObject.hostname\n  let validUrl = false\n  filterStrings.every((domain)=> {\n    if (hostname === domain) {\n      validUrl = true\n      return false\n    }\n  })\n  if (!validUrl) {\n    console.log('not a certified youtube link')\n  }\n\n\n\n  const params = new URLSearchParams(chosenString)\n  const videoId = params.get('v')\n\n  console.log(videoId)\n  if (!videoId) {\n    console.log('no v=')\n  }\n  return videoId\n\n}\n\n\nexport default {\n  videoIdParser,\n\n}\n"],"mappings":"AAAA,OAAO,SAASA,aAAaA,CAACC,YAAY,GAAG,8CAA8C,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EACtG;EACA,IAAI,CAACD,YAAY,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAE;IAClC,OAAOF,YAAY;EACrB;EAEA,MAAMG,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;EAClE;EACA,MAAMC,GAAG,GAAG,MAAM;EAClB,MAAMC,KAAK,GAAGL,YAAY,CAACE,QAAQ,CAACE,GAAG,CAAC,GAAGJ,YAAY,CAACM,OAAO,CAACF,GAAG,CAAC,GAAGA,GAAG,CAACG,MAAM,GAAG,CAAC;EACrF,IAAIC,UAAU,GAAGR,YAAY,CAACS,SAAS,CAACJ,KAAK,EAAEL,YAAY,CAACM,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC,CAAC;EAEhF,IAAI,CAACG,UAAU,CAACN,QAAQ,CAAC,UAAU,CAAC,EAAE;IACpCM,UAAU,GAAG,UAAU,GAAGA,UAAU;EACtC;EACA,MAAME,gBAAgB,GAAG,IAAIC,GAAG,CAACH,UAAU,CAAC;EAE5C,MAAMI,QAAQ,GAAGF,gBAAgB,CAACE,QAAQ;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpBV,aAAa,CAACW,KAAK,CAAEC,MAAM,IAAI;IAC7B,IAAIH,QAAQ,KAAKG,MAAM,EAAE;MACvBF,QAAQ,GAAG,IAAI;MACf,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,IAAI,CAACA,QAAQ,EAAE;IACbG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;EAC7C;EAIA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAACnB,YAAY,CAAC;EAChD,MAAMoB,OAAO,GAAGF,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAE/BL,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC;EACpB,IAAI,CAACA,OAAO,EAAE;IACZJ,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACtB;EACA,OAAOG,OAAO;AAEhB;AAGA,eAAe;EACbrB;AAEF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}