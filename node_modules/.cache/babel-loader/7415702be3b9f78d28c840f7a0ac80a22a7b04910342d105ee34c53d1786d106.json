{"ast":null,"code":"import { YOUTUBE_API_CODES } from '../constants/constants';\nimport { YOUTUBE_API_KEY } from \"../constants/api-key\";\nexport function validateVideoId(id = 'lxF31-mHLz0') {\n  return new Promise(resolve => {\n    const videoID = id;\n    const request = new XMLHttpRequest();\n    request.open('GET', 'https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id=' + videoID + '&key=' + YOUTUBE_API_KEY, true);\n    request.onreadystatechange = () => {\n      if (request.readyState === request.DONE) {\n        const code = validateVideoIdState(request);\n        resolve(code);\n      }\n    };\n    request.send();\n  });\n}\nfunction validateVideoIdState(request) {\n  if (!request || request.status < 200 || request.status >= 300) {\n    return YOUTUBE_API_CODES.GOOGLE_ERROR;\n  }\n  const responseText = JSON.parse(request.responseText);\n  if (responseText.items && responseText.items.length) {\n    return YOUTUBE_API_CODES.VALID;\n  } else {\n    return YOUTUBE_API_CODES.INVALID;\n  }\n}","map":{"version":3,"names":["YOUTUBE_API_CODES","YOUTUBE_API_KEY","validateVideoId","id","Promise","resolve","videoID","request","XMLHttpRequest","open","onreadystatechange","readyState","DONE","code","validateVideoIdState","send","status","GOOGLE_ERROR","responseText","JSON","parse","items","length","VALID","INVALID"],"sources":["X:/Coding/MyTube/src/utility/youtube-video-validation.js"],"sourcesContent":["import { YOUTUBE_API_CODES } from '../constants/constants'\nimport { YOUTUBE_API_KEY } from \"../constants/api-key\"\n\nexport function validateVideoId(id = 'lxF31-mHLz0') {\n  return new Promise((resolve) => {\n    const videoID = id\n    const request = new XMLHttpRequest()\n\n    request.open('GET', 'https://www.googleapis.com/youtube/v3/videos?part=snippet%2CcontentDetails%2Cstatistics&id='\n      + videoID + '&key=' + YOUTUBE_API_KEY, true)\n\n    request.onreadystatechange = () => {\n      if (request.readyState === request.DONE) {\n        const code = validateVideoIdState(request)\n        resolve(code)\n      }\n    }\n\n    request.send()\n  })\n}\n\nfunction validateVideoIdState(request) {\n  if (!request || request.status < 200 || request.status >= 300) {\n    return YOUTUBE_API_CODES.GOOGLE_ERROR\n  }\n\n  const responseText = JSON.parse(request.responseText)\n  if (responseText.items && responseText.items.length) {\n    return YOUTUBE_API_CODES.VALID\n  } else {\n    return YOUTUBE_API_CODES.INVALID\n  }\n}\n\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,wBAAwB;AAC1D,SAASC,eAAe,QAAQ,sBAAsB;AAEtD,OAAO,SAASC,eAAeA,CAACC,EAAE,GAAG,aAAa,EAAE;EAClD,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC9B,MAAMC,OAAO,GAAGH,EAAE;IAClB,MAAMI,OAAO,GAAG,IAAIC,cAAc,CAAC,CAAC;IAEpCD,OAAO,CAACE,IAAI,CAAC,KAAK,EAAE,6FAA6F,GAC7GH,OAAO,GAAG,OAAO,GAAGL,eAAe,EAAE,IAAI,CAAC;IAE9CM,OAAO,CAACG,kBAAkB,GAAG,MAAM;MACjC,IAAIH,OAAO,CAACI,UAAU,KAAKJ,OAAO,CAACK,IAAI,EAAE;QACvC,MAAMC,IAAI,GAAGC,oBAAoB,CAACP,OAAO,CAAC;QAC1CF,OAAO,CAACQ,IAAI,CAAC;MACf;IACF,CAAC;IAEDN,OAAO,CAACQ,IAAI,CAAC,CAAC;EAChB,CAAC,CAAC;AACJ;AAEA,SAASD,oBAAoBA,CAACP,OAAO,EAAE;EACrC,IAAI,CAACA,OAAO,IAAIA,OAAO,CAACS,MAAM,GAAG,GAAG,IAAIT,OAAO,CAACS,MAAM,IAAI,GAAG,EAAE;IAC7D,OAAOhB,iBAAiB,CAACiB,YAAY;EACvC;EAEA,MAAMC,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACb,OAAO,CAACW,YAAY,CAAC;EACrD,IAAIA,YAAY,CAACG,KAAK,IAAIH,YAAY,CAACG,KAAK,CAACC,MAAM,EAAE;IACnD,OAAOtB,iBAAiB,CAACuB,KAAK;EAChC,CAAC,MAAM;IACL,OAAOvB,iBAAiB,CAACwB,OAAO;EAClC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}