{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  let isYoutubeUrl;\n  isValidYoutubeUrl(chosenString).then(result => {\n    isYoutubeUrl = result;\n  }).catch(e => {\n    console.error(e);\n  });\n  if (isValidYoutubeUrl(chosenString)) {\n    console.log('bro?');\n    const videoId = getVideoIdParam(chosenString);\n    return videoId;\n  } else if (chosenString.length === VIDEO_ID_SIZE) {\n    return chosenString;\n  } else {\n    return EMPTY;\n  }\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    // debugger\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl;\n    }\n    const youtubeURLObject = new URL(youtubeUrl);\n    const hostname = youtubeURLObject.hostname;\n    let validUrl = false;\n    filterStrings.every(domainName => {\n      if (hostname === domainName) {\n        validUrl = true;\n        return false;\n      }\n    });\n    console.log(validUrl);\n    return validUrl;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","isYoutubeUrl","isValidYoutubeUrl","then","result","catch","e","console","error","log","videoId","getVideoIdParam","length","urlString","url","includes","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","validUrl","every","domainName","hasTopLevelDomain","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n\n  let isYoutubeUrl\n  isValidYoutubeUrl(chosenString).then(result =>{\n    isYoutubeUrl = result\n  }).catch(e => {\n    console.error(e)\n  })\n  if (isValidYoutubeUrl(chosenString)) {\n    console.log('bro?');\n    const videoId = getVideoIdParam(chosenString)\n    return videoId\n  }\n  else if (chosenString.length === VIDEO_ID_SIZE) {\n    return chosenString\n  }\n  else {\n    return EMPTY\n  }\n}\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  return videoId\n}\n\n// Has to be a link with domain\nasync function isValidYoutubeUrl(urlString) {\n    try {\n      // debugger\n      const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n\n      let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n      const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n      if (!youtubeUrl.includes(HTTPS)) {\n        youtubeUrl = HTTPS + youtubeUrl\n      }\n      const youtubeURLObject = new URL(youtubeUrl)\n\n      const hostname = youtubeURLObject.hostname\n      let validUrl = false\n      filterStrings.every((domainName) => {\n        if (hostname === domainName) {\n          validUrl = true\n          return false\n        }\n      })\n      console.log(validUrl);\n      return validUrl\n    } catch (e) {\n      return false\n    }\n\n}\n\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg')\n    || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}