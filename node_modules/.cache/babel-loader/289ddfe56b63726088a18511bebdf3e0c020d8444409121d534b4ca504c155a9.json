{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n/**\n *\n * @param {String} chosenString\n * @returns - returns the videoId if its a youtube url,\n *          - returns the string if its a non-url and matches 11 characters,\n *          - returns '' otherwise\n *\n */\nexport function videoIdParser(chosenString) {\n  if (hasNonYoutubeTopLevelDomain(chosenString)) {\n    console.log('non youtube domain');\n    return EMPTY;\n  }\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\n    return chosenString.length === VIDEO_ID_SIZE ? chosenString : EMPTY;\n  }\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => {\n    return isValid;\n  }).catch(e => {\n    console.error(e);\n  });\n  if (!isValid) {\n    return EMPTY;\n  }\n  const videoId = getVideoIdParam(chosenString);\n  return videoId;\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  console.log(`url: ${url}`);\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  console.log(videoId);\n  return videoId;\n}\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl;\n    }\n    const youtubeURLObject = new URL(youtubeUrl);\n    const hostname = youtubeURLObject.hostname;\n    let isValidUrl = false;\n    filterStrings.every(domainName => {\n      if (hostname === domainName) {\n        isValidUrl = true;\n        return false;\n      }\n    });\n    return isValidUrl;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasNonYoutubeTopLevelDomain(string) {\n  return string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org') || string.includes('.us') || string.includes('.co');\n}\nfunction hasYoutubeTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.be');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","hasNonYoutubeTopLevelDomain","console","log","hasYoutubeTopLevelDomain","length","isValid","isValidYoutubeUrl","then","catch","e","error","videoId","getVideoIdParam","urlString","url","includes","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","isValidUrl","every","domainName","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\n\n/**\n *\n * @param {String} chosenString\n * @returns - returns the videoId if its a youtube url,\n *          - returns the string if its a non-url and matches 11 characters,\n *          - returns '' otherwise\n *\n */\nexport function videoIdParser(chosenString) {\n  if (hasNonYoutubeTopLevelDomain(chosenString)) {\n    console.log('non youtube domain');\n    return EMPTY\n  }\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\n    return chosenString.length === VIDEO_ID_SIZE ? chosenString : EMPTY\n  }\n\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => { return isValid }).catch(e => {\n    console.error(e)\n  })\n\n  if (!isValid) {\n    return EMPTY\n  }\n\n  const videoId = getVideoIdParam(chosenString)\n  return videoId\n}\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n  console.log(`url: ${url}`);\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  console.log(videoId);\n  return videoId\n}\n\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl\n    }\n\n    const youtubeURLObject = new URL(youtubeUrl)\n    const hostname = youtubeURLObject.hostname\n    let isValidUrl = false\n\n    filterStrings.every((domainName) => {\n      if (hostname === domainName) {\n        isValidUrl = true\n        return false\n      }\n    })\n    return isValidUrl\n  } catch (e) {\n    return false\n  }\n}\n\nfunction hasNonYoutubeTopLevelDomain(string) {\n  return string.includes('.ca') || string.includes('.net') || string.includes('.gg')\n  || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n  || string.includes('.us') || string.includes('.co')\n}\n\nfunction hasYoutubeTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.be')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}