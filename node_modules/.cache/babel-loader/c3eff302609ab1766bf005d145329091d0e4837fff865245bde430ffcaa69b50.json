{"ast":null,"code":"export default function videoIdParser(chosenString, opts = {}) {\n  // not a URL\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === 11) {\n      return chosenString;\n    } else {\n      console.error('Invalid ID');\n      return '';\n    }\n  }\n\n  // Sinful constants\n  const WWW = 'www.';\n  const HTTP = 'https://';\n  // lord forgive me, we are checking if its a youtube link at all\n  if (!isDotCom(chosenString)) {\n    console.log('invalid youtube domain');\n    return '';\n  }\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift));\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  if (!youtubeUrl.includes(HTTP)) {\n    youtubeUrl = HTTP + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domainName => {\n    if (hostname === domainName) {\n      validUrl = true;\n      return false;\n    }\n  });\n  if (!validUrl) {\n    console.error('not a certified youtube link üò∂‚Äçüå´Ô∏è');\n    return '';\n  }\n  /////////////////////////////\n  // Once again I beg,\n  let url = chosenString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTP)) {\n    url = HTTP + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  if (!videoId) {\n    console.log('no v=');\n  }\n  return videoId;\n}\nfunction hasTopLevelDomain(string) {\n  return isDotCom(string) || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}\nfunction isDotCom(string) {\n  return string.includes('.com');\n}","map":{"version":3,"names":["videoIdParser","chosenString","opts","hasTopLevelDomain","length","console","error","WWW","HTTP","isDotCom","log","shift","includes","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","URL","hostname","validUrl","every","domainName","url","params","searchParams","videoId","get","string"],"sources":["X:/Coding/MyTube/src/utility/parser/video-id-parser.js"],"sourcesContent":["export default function videoIdParser(chosenString, opts = {}) {\n  // not a URL\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === 11) {\n      return chosenString\n    } else {\n      console.error('Invalid ID')\n      return ''\n    }\n  }\n\n\n\n  // Sinful constants\n  const WWW = 'www.'\n  const HTTP = 'https://'\n  // lord forgive me, we are checking if its a youtube link at all\n  if (!isDotCom(chosenString)) {\n    console.log('invalid youtube domain')\n    return ''\n  }\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift))\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n  if (!youtubeUrl.includes(HTTP)) {\n    youtubeUrl = HTTP + youtubeUrl\n  }\n  const youtubeURLObject = new URL(youtubeUrl)\n\n  const hostname = youtubeURLObject.hostname\n  let validUrl = false\n  filterStrings.every((domainName) => {\n    if (hostname === domainName) {\n      validUrl = true\n      return false\n    }\n  })\n  if (!validUrl) {\n    console.error('not a certified youtube link üò∂‚Äçüå´Ô∏è')\n    return ''\n  }\n  /////////////////////////////\n  // Once again I beg,\n  let url = chosenString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTP)) {\n    url = HTTP + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n\n  if (!videoId) {\n    console.log('no v=')\n  }\n  return videoId\n\n}\n\nfunction hasTopLevelDomain(string){\n  return isDotCom(string) || string.includes('.ca') || string.includes('.net')|| string.includes('.gg')\n         || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n\nfunction isDotCom(string) {\n  return string.includes('.com')\n}\n"],"mappings":"AAAA,eAAe,SAASA,aAAaA,CAACC,YAAY,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAC7D;EACA,IAAI,CAACC,iBAAiB,CAACF,YAAY,CAAC,EAAE;IACpC,IAAIA,YAAY,CAACG,MAAM,KAAK,EAAE,EAAE;MAC9B,OAAOH,YAAY;IACrB,CAAC,MAAM;MACLI,OAAO,CAACC,KAAK,CAAC,YAAY,CAAC;MAC3B,OAAO,EAAE;IACX;EACF;;EAIA;EACA,MAAMC,GAAG,GAAG,MAAM;EAClB,MAAMC,IAAI,GAAG,UAAU;EACvB;EACA,IAAI,CAACC,QAAQ,CAACR,YAAY,CAAC,EAAE;IAC3BI,OAAO,CAACK,GAAG,CAAC,wBAAwB,CAAC;IACrC,OAAO,EAAE;EACX;EACA,MAAMC,KAAK,GAAGV,YAAY,CAACW,QAAQ,CAACL,GAAG,CAAC,GAAGN,YAAY,CAACY,OAAO,CAACN,GAAG,CAAC,GAAGA,GAAG,CAACH,MAAM,GAAG,CAAC;EACrF,IAAIU,UAAU,GAAGb,YAAY,CAACc,SAAS,CAACJ,KAAK,EAAEV,YAAY,CAACY,OAAO,CAAC,GAAG,EAAEF,KAAK,CAAC,CAAC;EAChF,MAAMK,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;EAElE,IAAI,CAACF,UAAU,CAACF,QAAQ,CAACJ,IAAI,CAAC,EAAE;IAC9BM,UAAU,GAAGN,IAAI,GAAGM,UAAU;EAChC;EACA,MAAMG,gBAAgB,GAAG,IAAIC,GAAG,CAACJ,UAAU,CAAC;EAE5C,MAAMK,QAAQ,GAAGF,gBAAgB,CAACE,QAAQ;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpBJ,aAAa,CAACK,KAAK,CAAEC,UAAU,IAAK;IAClC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;MAC3BF,QAAQ,GAAG,IAAI;MACf,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,IAAI,CAACA,QAAQ,EAAE;IACbf,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAO,EAAE;EACX;EACA;EACA;EACA,IAAIiB,GAAG,GAAGtB,YAAY;EACtB,IAAI,CAACsB,GAAG,CAACX,QAAQ,CAACL,GAAG,CAAC,EAAE;IACtBgB,GAAG,GAAGhB,GAAG,GAAGgB,GAAG;EACjB;EACA,IAAI,CAACA,GAAG,CAACX,QAAQ,CAACJ,IAAI,CAAC,EAAE;IACvBe,GAAG,GAAGf,IAAI,GAAGe,GAAG;EAClB;EAEA,MAAMC,MAAM,GAAG,IAAIN,GAAG,CAACK,GAAG,CAAC,CAACE,YAAY;EAExC,MAAMC,OAAO,GAAGF,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAE/B,IAAI,CAACD,OAAO,EAAE;IACZrB,OAAO,CAACK,GAAG,CAAC,OAAO,CAAC;EACtB;EACA,OAAOgB,OAAO;AAEhB;AAEA,SAASvB,iBAAiBA,CAACyB,MAAM,EAAC;EAChC,OAAOnB,QAAQ,CAACmB,MAAM,CAAC,IAAIA,MAAM,CAAChB,QAAQ,CAAC,KAAK,CAAC,IAAIgB,MAAM,CAAChB,QAAQ,CAAC,MAAM,CAAC,IAAGgB,MAAM,CAAChB,QAAQ,CAAC,KAAK,CAAC,IAC3FgB,MAAM,CAAChB,QAAQ,CAAC,MAAM,CAAC,IAAIgB,MAAM,CAAChB,QAAQ,CAAC,MAAM,CAAC,IAAIgB,MAAM,CAAChB,QAAQ,CAAC,KAAK,CAAC,IAAIgB,MAAM,CAAChB,QAAQ,CAAC,MAAM,CAAC;AACnH;AAEA,SAASH,QAAQA,CAACmB,MAAM,EAAE;EACxB,OAAOA,MAAM,CAAChB,QAAQ,CAAC,MAAM,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}