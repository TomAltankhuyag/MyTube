{"ast":null,"code":"import YoutubeVideo from './components/YoutubeVideo.vue';\nimport YoutubeController from './components/YoutubeController.vue';\nimport SideBarMenu from './components/SideBarMenu.vue';\nimport { usePlaylistStore } from './store/playlist';\nimport { VSwitch } from 'vuetify/components';\nimport { mapState } from 'pinia';\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeController,\n    VSwitch,\n    SideBarMenu\n  },\n  data() {\n    return {\n      isDebuggerOn: false,\n      isPlaylistOn: false\n    };\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentVideo'])\n  },\n  mounted() {\n    const currentPlaylist = JSON.parse(sessionStorage.getItem('currentPlaylist'));\n    if (currentPlaylist) {\n      this.$store.playlist.setCurrentPlaylist(currentPlaylist);\n    }\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input);\n      fetchVideoInformation(videoId).then(status => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.onValidIdSubmission();\n          this.videoId = videoId;\n        }\n      });\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentVideo']),\n    videoId() {\n      return this.currentVideo.videoId;\n    }\n  }\n};","map":{"version":3,"names":["YoutubeVideo","YoutubeController","SideBarMenu","usePlaylistStore","VSwitch","mapState","name","components","data","isDebuggerOn","isPlaylistOn","computed","mounted","currentPlaylist","JSON","parse","sessionStorage","getItem","$store","playlist","setCurrentPlaylist","methods","onSubmit","input","videoId","videoIdParser","fetchVideoInformation","then","status","YOUTUBE_API_CODES","VALID","onValidIdSubmission","currentVideo"],"sources":["X:\\Coding\\MyTube\\src\\App.vue"],"sourcesContent":["<template lang=\"pug\">\r\n#app.app\r\n  .youtube-app-container\r\n    youtube-controller.controller\r\n    v-switch(v-model=\"isPlaylistOn\"\r\n             :label=\"isPlaylistOn ? 'Playlist On' : 'Playlist Off'\"\r\n             :class=\"{activated: isPlaylistOn}\").switch-style\r\n    h3 Current Video: {{ currentVideo.name }}\r\n    youtube-video(:videoId=\"videoId\").video\r\n    side-bar-menu(:isPlaylistOn=\"isPlaylistOn\").side-bar-menu\r\n</template>\r\n\r\n<script>\r\nimport YoutubeVideo from './components/YoutubeVideo.vue'\r\nimport YoutubeController from './components/YoutubeController.vue'\r\nimport SideBarMenu from './components/SideBarMenu.vue'\r\nimport { usePlaylistStore } from './store/playlist'\r\nimport { VSwitch } from 'vuetify/components'\r\nimport { mapState } from 'pinia'\r\nexport default {\r\n  name: 'App',\r\n  components: {\r\n    YoutubeVideo,\r\n    YoutubeController,\r\n    VSwitch,\r\n    SideBarMenu\r\n  },\r\n  data() {\r\n    return {\r\n      isDebuggerOn: false,\r\n      isPlaylistOn: false\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(usePlaylistStore, ['currentVideo']),\r\n  },\r\n  mounted() {\r\n    const currentPlaylist = JSON.parse(sessionStorage.getItem('currentPlaylist'))\r\n    if (currentPlaylist) {\r\n      this.$store.playlist.setCurrentPlaylist(currentPlaylist)\r\n    }\r\n  },\r\n  methods: {\r\n    onSubmit(input) {\r\n      const videoId = videoIdParser(input)\r\n      fetchVideoInformation(videoId).then((status) => {\r\n        if (status === YOUTUBE_API_CODES.VALID) {\r\n          this.onValidIdSubmission()\r\n          this.videoId = videoId\r\n        }\r\n      })\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(usePlaylistStore, ['currentVideo']),\r\n\r\n    videoId() {\r\n      return this.currentVideo.videoId\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import 'src/styles/flex';\r\n#app {\r\n  min-height: 100vh;\r\n  background-image: url('assets/images/pinkStreets.jpg');\r\n  background-size: cover;\r\n  background-position: center;\r\n}\r\n.top-bar {\r\n  margin-bottom: 75px;\r\n  z-index: 1;\r\n}\r\n.side\r\n.youtube-app-container {\r\n  @include flex-column();\r\n\r\n  .controller {\r\n    margin-bottom: 30px;\r\n  }\r\n\r\n  .video {\r\n    margin: 15px 15px 100px 15px;\r\n  }\r\n}\r\n\r\n.switch-style {\r\n  color: red;\r\n  font-family: copperplate;\r\n\r\n  &.activated {\r\n    color: green;\r\n  }\r\n}\r\n\r\n.youtube-app-container {\r\n  box-sizing: border-box;\r\n  @include flex-column();\r\n  padding: 50px 0;\r\n}\r\n</style>\r\n"],"mappings":"AAaA,OAAOA,YAAW,MAAO,+BAA8B;AACvD,OAAOC,iBAAgB,MAAO,oCAAmC;AACjE,OAAOC,WAAU,MAAO,8BAA6B;AACrD,SAASC,gBAAe,QAAS,kBAAiB;AAClD,SAASC,OAAM,QAAS,oBAAmB;AAC3C,SAASC,QAAO,QAAS,OAAM;AAC/B,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVP,YAAY;IACZC,iBAAiB;IACjBG,OAAO;IACPF;EACF,CAAC;EACDM,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAACF,gBAAgB,EAAE,CAAC,cAAc,CAAC;EAChD,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,MAAMC,eAAc,GAAIC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC5E,IAAIJ,eAAe,EAAE;MACnB,IAAI,CAACK,MAAM,CAACC,QAAQ,CAACC,kBAAkB,CAACP,eAAe;IACzD;EACF,CAAC;EACDQ,OAAO,EAAE;IACPC,QAAQA,CAACC,KAAK,EAAE;MACd,MAAMC,OAAM,GAAIC,aAAa,CAACF,KAAK;MACnCG,qBAAqB,CAACF,OAAO,CAAC,CAACG,IAAI,CAAEC,MAAM,IAAK;QAC9C,IAAIA,MAAK,KAAMC,iBAAiB,CAACC,KAAK,EAAE;UACtC,IAAI,CAACC,mBAAmB,CAAC;UACzB,IAAI,CAACP,OAAM,GAAIA,OAAM;QACvB;MACF,CAAC;IACH;EACF,CAAC;EACDb,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAACF,gBAAgB,EAAE,CAAC,cAAc,CAAC,CAAC;IAE/CqB,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACQ,YAAY,CAACR,OAAM;IACjC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}