{"ast":null,"code":"import YoutubeVideo from './components/YoutubeVideo.vue';\nimport YoutubeController from './components/YoutubeController.vue';\nimport DebugPanel from './components/DebugPanel.vue';\nimport SideBarMenu from './components/SideBarMenu.vue';\nimport TopBar from './components/TopBar.vue';\nimport { usePlaylistStore } from './store/playlist';\nimport { VSwitch } from 'vuetify/components';\nimport { mapState } from 'pinia';\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeController,\n    DebugPanel,\n    VSwitch,\n    SideBarMenu,\n    TopBar\n  },\n  data() {\n    return {\n      isDebuggerOn: false,\n      isPlaylistOn: false\n    };\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentVideo'])\n  },\n  mounted() {\n    const currentPlaylist = JSON.parse(sessionStorage.getItem('currentPlaylist'));\n    if (currentPlaylist) {\n      this.$store.playlist.setCurrentPlaylist(currentPlaylist);\n    }\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input);\n      fetchVideoInformation(videoId).then(status => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.onValidIdSubmission();\n          this.videoId = videoId;\n        }\n      });\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentVideo']),\n    videoId() {\n      return this.currentVideo.videoId;\n    }\n  }\n};","map":{"version":3,"names":["YoutubeVideo","YoutubeController","DebugPanel","SideBarMenu","TopBar","usePlaylistStore","VSwitch","mapState","name","components","data","isDebuggerOn","isPlaylistOn","computed","mounted","currentPlaylist","JSON","parse","sessionStorage","getItem","$store","playlist","setCurrentPlaylist","methods","onSubmit","input","videoId","videoIdParser","fetchVideoInformation","then","status","YOUTUBE_API_CODES","VALID","onValidIdSubmission","currentVideo"],"sources":["X:\\Coding\\MyTube\\src\\App.vue"],"sourcesContent":["<template lang=\"pug\">\n#app.app\n  //- top-bar.top-bar\n  .youtube-app-container\n    youtube-controller.controller\n    v-switch(v-model=\"isPlaylistOn\"\n             :label=\"isPlaylistOn ? 'Playlist On' : 'Playlist Off'\"\n             :class=\"{activated: isPlaylistOn}\").switch-style\n    h3 Current Video: {{ currentVideo.name }}\n    youtube-video(:videoId=\"videoId\").video\n    side-bar-menu(:isPlaylistOn=\"isPlaylistOn\").side-bar-menu\n    debug-panel(v-if=\"isDebuggerOn\")\n</template>\n\n<script>\nimport YoutubeVideo from './components/YoutubeVideo.vue'\nimport YoutubeController from './components/YoutubeController.vue'\nimport DebugPanel from './components/DebugPanel.vue'\nimport SideBarMenu from './components/SideBarMenu.vue'\nimport TopBar from './components/TopBar.vue'\nimport { usePlaylistStore } from './store/playlist'\nimport { VSwitch } from 'vuetify/components'\nimport { mapState } from 'pinia'\nexport default {\n  name: 'App',\n  components: {\n    YoutubeVideo,\n    YoutubeController,\n    DebugPanel,\n    VSwitch,\n    SideBarMenu,\n    TopBar\n  },\n  data() {\n    return {\n      isDebuggerOn: false,\n      isPlaylistOn: false\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentVideo']),\n  },\n  mounted() {\n    const currentPlaylist = JSON.parse(sessionStorage.getItem('currentPlaylist'))\n    if (currentPlaylist) {\n      this.$store.playlist.setCurrentPlaylist(currentPlaylist)\n    }\n  },\n  methods: {\n    onSubmit(input) {\n      const videoId = videoIdParser(input)\n      fetchVideoInformation(videoId).then((status) => {\n        if (status === YOUTUBE_API_CODES.VALID) {\n          this.onValidIdSubmission()\n          this.videoId = videoId\n        }\n      })\n    }\n  },\n  computed: {\n    ...mapState(usePlaylistStore, ['currentVideo']),\n\n    videoId() {\n      return this.currentVideo.videoId\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import 'src/styles/flex';\n#app {\n  min-height: 100vh;\n  background-image: url('assets/images/pinkStreets.jpg');\n  background-size: cover;\n  background-position: center;\n}\n.top-bar {\n  margin-bottom: 75px;\n  z-index: 1;\n}\n.side\n.youtube-app-container {\n  @include flex-column();\n\n  .controller {\n    margin-bottom: 30px;\n  }\n\n  .video {\n    margin: 15px 15px 100px 15px;\n  }\n}\n\n.switch-style {\n  color: red;\n  font-family: copperplate;\n\n  &.activated {\n    color: green;\n  }\n}\n\n.youtube-app-container {\n  box-sizing: border-box;\n  @include flex-column();\n  margin: 50px 0;\n}\n</style>\n"],"mappings":"AAeA,OAAOA,YAAW,MAAO,+BAA8B;AACvD,OAAOC,iBAAgB,MAAO,oCAAmC;AACjE,OAAOC,UAAS,MAAO,6BAA4B;AACnD,OAAOC,WAAU,MAAO,8BAA6B;AACrD,OAAOC,MAAK,MAAO,yBAAwB;AAC3C,SAASC,gBAAe,QAAS,kBAAiB;AAClD,SAASC,OAAM,QAAS,oBAAmB;AAC3C,SAASC,QAAO,QAAS,OAAM;AAC/B,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,UAAU,EAAE;IACVT,YAAY;IACZC,iBAAiB;IACjBC,UAAU;IACVI,OAAO;IACPH,WAAW;IACXC;EACF,CAAC;EACDM,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAACF,gBAAgB,EAAE,CAAC,cAAc,CAAC;EAChD,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,MAAMC,eAAc,GAAIC,IAAI,CAACC,KAAK,CAACC,cAAc,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC5E,IAAIJ,eAAe,EAAE;MACnB,IAAI,CAACK,MAAM,CAACC,QAAQ,CAACC,kBAAkB,CAACP,eAAe;IACzD;EACF,CAAC;EACDQ,OAAO,EAAE;IACPC,QAAQA,CAACC,KAAK,EAAE;MACd,MAAMC,OAAM,GAAIC,aAAa,CAACF,KAAK;MACnCG,qBAAqB,CAACF,OAAO,CAAC,CAACG,IAAI,CAAEC,MAAM,IAAK;QAC9C,IAAIA,MAAK,KAAMC,iBAAiB,CAACC,KAAK,EAAE;UACtC,IAAI,CAACC,mBAAmB,CAAC;UACzB,IAAI,CAACP,OAAM,GAAIA,OAAM;QACvB;MACF,CAAC;IACH;EACF,CAAC;EACDb,QAAQ,EAAE;IACR,GAAGN,QAAQ,CAACF,gBAAgB,EAAE,CAAC,cAAc,CAAC,CAAC;IAE/CqB,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACQ,YAAY,CAACR,OAAM;IACjC;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}