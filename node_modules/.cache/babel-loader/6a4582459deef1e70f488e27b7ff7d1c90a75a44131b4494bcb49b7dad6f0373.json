{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n// returns the videoId of the chosen string\n// added some general filtering for a non-trivial invalid videoId detection\nexport function videoIdParser(chosenString) {\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === VIDEO_ID_SIZE) {\n      return chosenString;\n    } else {\n      return EMPTY;\n    }\n  }\n  if (!isValidYoutubeUrl(chosenString)) {\n    console.error('not a certified youtube link 😶‍🌫️');\n    return EMPTY;\n  }\n  if (!isValidYoutubeUrl(chosenString)) {\n    console.error('not a certified youtube link 😶‍🌫️');\n    return EMPTY;\n  }\n  const videoId = getVideoIdParam(chosenString);\n  return videoId;\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\nfunction isValidYoutubeUrl(urlString) {\n  const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  if (!youtubeUrl.includes(HTTPS)) {\n    youtubeUrl = HTTPS + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domainName => {\n    if (hostname === domainName) {\n      validUrl = true;\n      return false;\n    }\n  });\n  return validUrl;\n}\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","hasTopLevelDomain","length","isValidYoutubeUrl","console","error","videoId","getVideoIdParam","urlString","url","includes","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","validUrl","every","domainName","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\r\n\r\n// returns the videoId of the chosen string\r\n// added some general filtering for a non-trivial invalid videoId detection\r\nexport function videoIdParser(chosenString) {\r\n  if (!hasTopLevelDomain(chosenString)) {\r\n    if (chosenString.length === VIDEO_ID_SIZE) {\r\n      return chosenString\r\n    } else {\r\n      return EMPTY\r\n    }\r\n  }\r\n\r\n  if (!isValidYoutubeUrl(chosenString)) {\r\n    console.error('not a certified youtube link 😶‍🌫️')\r\n    return EMPTY\r\n  }\r\n\r\n  if (!isValidYoutubeUrl(chosenString)) {\r\n    console.error('not a certified youtube link 😶‍🌫️')\r\n    return EMPTY\r\n  }\r\n\r\n  const videoId = getVideoIdParam(chosenString)\r\n  return videoId\r\n}\r\n\r\nfunction getVideoIdParam(urlString) {\r\n  let url = urlString\r\n  if (!url.includes(WWW)) {\r\n    url = WWW + url\r\n  }\r\n  if (!url.includes(HTTPS)) {\r\n    url = HTTPS + url\r\n  }\r\n\r\n  const params = new URL(url).searchParams\r\n\r\n  const videoId = params.get('v')\r\n  return videoId\r\n}\r\n\r\nfunction isValidYoutubeUrl(urlString) {\r\n  const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\r\n\r\n  let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\r\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\r\n\r\n  if (!youtubeUrl.includes(HTTPS)) {\r\n    youtubeUrl = HTTPS + youtubeUrl\r\n  }\r\n  const youtubeURLObject = new URL(youtubeUrl)\r\n\r\n  const hostname = youtubeURLObject.hostname\r\n  let validUrl = false\r\n  filterStrings.every((domainName) => {\r\n    if (hostname === domainName) {\r\n      validUrl = true\r\n      return false\r\n    }\r\n  })\r\n  return validUrl\r\n}\r\n\r\nfunction hasTopLevelDomain(string) {\r\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg')\r\n    || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\r\n}\r\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,aAAa,EAAEC,GAAG,EAAEC,KAAK,QAAQ,wBAAwB;;AAEzE;AACA;AACA,OAAO,SAASC,aAAaA,CAACC,YAAY,EAAE;EAC1C,IAAI,CAACC,iBAAiB,CAACD,YAAY,CAAC,EAAE;IACpC,IAAIA,YAAY,CAACE,MAAM,KAAKN,aAAa,EAAE;MACzC,OAAOI,YAAY;IACrB,CAAC,MAAM;MACL,OAAOL,KAAK;IACd;EACF;EAEA,IAAI,CAACQ,iBAAiB,CAACH,YAAY,CAAC,EAAE;IACpCI,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAOV,KAAK;EACd;EAEA,IAAI,CAACQ,iBAAiB,CAACH,YAAY,CAAC,EAAE;IACpCI,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAOV,KAAK;EACd;EAEA,MAAMW,OAAO,GAAGC,eAAe,CAACP,YAAY,CAAC;EAC7C,OAAOM,OAAO;AAChB;AAEA,SAASC,eAAeA,CAACC,SAAS,EAAE;EAClC,IAAIC,GAAG,GAAGD,SAAS;EACnB,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACb,GAAG,CAAC,EAAE;IACtBY,GAAG,GAAGZ,GAAG,GAAGY,GAAG;EACjB;EACA,IAAI,CAACA,GAAG,CAACC,QAAQ,CAACZ,KAAK,CAAC,EAAE;IACxBW,GAAG,GAAGX,KAAK,GAAGW,GAAG;EACnB;EAEA,MAAME,MAAM,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC,CAACI,YAAY;EAExC,MAAMP,OAAO,GAAGK,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAC/B,OAAOR,OAAO;AAChB;AAEA,SAASH,iBAAiBA,CAACK,SAAS,EAAE;EACpC,MAAMO,KAAK,GAAGP,SAAS,CAACE,QAAQ,CAACb,GAAG,CAAC,GAAGW,SAAS,CAACQ,OAAO,CAACnB,GAAG,CAAC,GAAGA,GAAG,CAACK,MAAM,GAAG,CAAC;EAE/E,IAAIe,UAAU,GAAGT,SAAS,CAACU,SAAS,CAACH,KAAK,EAAEP,SAAS,CAACQ,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC,CAAC;EAC1E,MAAMI,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;EAElE,IAAI,CAACF,UAAU,CAACP,QAAQ,CAACZ,KAAK,CAAC,EAAE;IAC/BmB,UAAU,GAAGnB,KAAK,GAAGmB,UAAU;EACjC;EACA,MAAMG,gBAAgB,GAAG,IAAIR,GAAG,CAACK,UAAU,CAAC;EAE5C,MAAMI,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpBH,aAAa,CAACI,KAAK,CAAEC,UAAU,IAAK;IAClC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;MAC3BF,QAAQ,GAAG,IAAI;MACf,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,OAAOA,QAAQ;AACjB;AAEA,SAASrB,iBAAiBA,CAACwB,MAAM,EAAE;EACjC,OAAOA,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,KAAK,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,KAAK,CAAC,IACxGe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,KAAK,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC;AAC9G"},"metadata":{},"sourceType":"module","externalDependencies":[]}