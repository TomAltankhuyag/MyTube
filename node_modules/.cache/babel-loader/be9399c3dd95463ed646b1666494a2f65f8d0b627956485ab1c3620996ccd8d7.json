{"ast":null,"code":"import { START_SONG_INDEX } from \"../../constants/constants\";\nexport const actions = {\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.warn('no playlists ):');\n      return;\n    }\n    this.currentPlaylist = this.playlists[index].playlist;\n    if (!this.currentSong.videoId) {\n      const songIndex = getRandomInt(0, this.currentPlaylist.length);\n      this.changeSong(songIndex);\n    }\n  },\n  changeSong(index = START_SONG_INDEX) {\n    if (this.currentPlaylist.length === 0) {\n      console.warn('out of songs!');\n      return;\n    }\n    const song = this.currentPlaylist[index];\n    this.currentSong = song;\n  },\n  removeSongByVideoId(videoId) {\n    const song = this.currentPlaylist.find(song => song.videoId === videoId);\n    const index = this.currentPlaylist.indexOf(song);\n    if (index >= 0) {\n      this.currentPlaylist.splice(index, 1);\n    }\n  },\n  addSongToLast() {}\n};\n// min - Inclusive\n// max - Exclusive\nfunction getRandomInt(min = 0, max) {\n  if (!max) {\n    console.warn('max warning');\n  }\n  return Math.floor(Math.random() * (max - min) + min);\n}","map":{"version":3,"names":["START_SONG_INDEX","actions","syncPlaylist","index","playlists","length","console","warn","currentPlaylist","playlist","currentSong","videoId","songIndex","getRandomInt","changeSong","song","removeSongByVideoId","find","indexOf","splice","addSongToLast","min","max","Math","floor","random"],"sources":["X:/Coding/MyTube/src/store/playlist/actions.js"],"sourcesContent":["import { START_SONG_INDEX } from \"../../constants/constants\"\n\nexport const actions = {\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.warn('no playlists ):')\n      return\n    }\n    this.currentPlaylist = this.playlists[index].playlist\n    if (!this.currentSong.videoId) {\n      const songIndex = getRandomInt(0, this.currentPlaylist.length)\n      this.changeSong(songIndex)\n    }\n  },\n  changeSong(index = START_SONG_INDEX) {\n    if (this.currentPlaylist.length === 0) {\n      console.warn('out of songs!')\n      return\n    }\n    const song = this.currentPlaylist[index]\n    this.currentSong = song\n  },\n  removeSongByVideoId(videoId) {\n    const song = this.currentPlaylist.find(song => song.videoId === videoId)\n    const index = this.currentPlaylist.indexOf(song)\n    if (index >= 0) {\n      this.currentPlaylist.splice(index, 1)\n    }\n  },\n  addSongToLast() {\n\n  }\n}\n// min - Inclusive\n// max - Exclusive\nfunction getRandomInt(min = 0, max) {\n  if (!max) {\n    console.warn('max warning')\n  }\n  return Math.floor(Math.random() * (max - min) + min)\n}\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,2BAA2B;AAE5D,OAAO,MAAMC,OAAO,GAAG;EACrBC,YAAYA,CAACC,KAAK,GAAG,CAAC,EAAE;IACtB,IAAI,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC/BC,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;MAC/B;IACF;IACA,IAAI,CAACC,eAAe,GAAG,IAAI,CAACJ,SAAS,CAACD,KAAK,CAAC,CAACM,QAAQ;IACrD,IAAI,CAAC,IAAI,CAACC,WAAW,CAACC,OAAO,EAAE;MAC7B,MAAMC,SAAS,GAAGC,YAAY,CAAC,CAAC,EAAE,IAAI,CAACL,eAAe,CAACH,MAAM,CAAC;MAC9D,IAAI,CAACS,UAAU,CAACF,SAAS,CAAC;IAC5B;EACF,CAAC;EACDE,UAAUA,CAACX,KAAK,GAAGH,gBAAgB,EAAE;IACnC,IAAI,IAAI,CAACQ,eAAe,CAACH,MAAM,KAAK,CAAC,EAAE;MACrCC,OAAO,CAACC,IAAI,CAAC,eAAe,CAAC;MAC7B;IACF;IACA,MAAMQ,IAAI,GAAG,IAAI,CAACP,eAAe,CAACL,KAAK,CAAC;IACxC,IAAI,CAACO,WAAW,GAAGK,IAAI;EACzB,CAAC;EACDC,mBAAmBA,CAACL,OAAO,EAAE;IAC3B,MAAMI,IAAI,GAAG,IAAI,CAACP,eAAe,CAACS,IAAI,CAACF,IAAI,IAAIA,IAAI,CAACJ,OAAO,KAAKA,OAAO,CAAC;IACxE,MAAMR,KAAK,GAAG,IAAI,CAACK,eAAe,CAACU,OAAO,CAACH,IAAI,CAAC;IAChD,IAAIZ,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACK,eAAe,CAACW,MAAM,CAAChB,KAAK,EAAE,CAAC,CAAC;IACvC;EACF,CAAC;EACDiB,aAAaA,CAAA,EAAG,CAEhB;AACF,CAAC;AACD;AACA;AACA,SAASP,YAAYA,CAACQ,GAAG,GAAG,CAAC,EAAEC,GAAG,EAAE;EAClC,IAAI,CAACA,GAAG,EAAE;IACRhB,OAAO,CAACC,IAAI,CAAC,aAAa,CAAC;EAC7B;EACA,OAAOgB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIH,GAAG,GAAGD,GAAG,CAAC,GAAGA,GAAG,CAAC;AACtD"},"metadata":{},"sourceType":"module","externalDependencies":[]}