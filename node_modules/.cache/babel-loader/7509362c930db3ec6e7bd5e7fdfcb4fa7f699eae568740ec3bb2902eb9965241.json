{"ast":null,"code":"export const actions = {\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.log('no playlists ):');\n      return;\n    }\n    this.currentPlaylist = this.playlists[index].playlist;\n    if (Object.keys(this.currentSong.length === 0)) {\n      console.log(this.currentSong);\n    }\n  },\n  changeSong(index = 0) {\n    if (this.currentPlaylist.length === 0) {\n      console.log('out of songs!');\n      return;\n    }\n    const song = this.currentPlaylist[index];\n    this.currentSong = song;\n    // Remove the song from current playlist to avoid repeat.\n    // this.removeSongByVideoId(song.videoId)\n  },\n\n  removeSongByVideoId(videoId) {\n    const song = this.currentPlaylist.find(song => song.videoId === videoId);\n    const index = this.currentPlaylist.indexOf(song);\n    if (index >= 0) {\n      this.currentPlaylist.splice(index, 1);\n    }\n  }\n};","map":{"version":3,"names":["actions","syncPlaylist","index","playlists","length","console","log","currentPlaylist","playlist","Object","keys","currentSong","changeSong","song","removeSongByVideoId","videoId","find","indexOf","splice"],"sources":["X:/Coding/MyTube/src/store/playlist/actions.js"],"sourcesContent":["export const actions = {\n  syncPlaylist(index = 0) {\n    if (this.playlists.length === 0) {\n      console.log('no playlists ):')\n      return\n    }\n    this.currentPlaylist = this.playlists[index].playlist\n    if (Object.keys(this.currentSong.length === 0)) {\n      console.log(this.currentSong)\n    }\n  },\n  changeSong(index = 0) {\n    if (this.currentPlaylist.length === 0) {\n      console.log('out of songs!')\n      return\n    }\n    const song = this.currentPlaylist[index]\n    this.currentSong = song\n    // Remove the song from current playlist to avoid repeat.\n    // this.removeSongByVideoId(song.videoId)\n\n  },\n  removeSongByVideoId(videoId) {\n    const song = this.currentPlaylist.find(song => song.videoId === videoId)\n    const index = this.currentPlaylist.indexOf(song)\n    if (index >= 0) {\n      this.currentPlaylist.splice(index, 1)\n    }\n  }\n}\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAG;EACrBC,YAAYA,CAACC,KAAK,GAAG,CAAC,EAAE;IACtB,IAAI,IAAI,CAACC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC/BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC9B;IACF;IACA,IAAI,CAACC,eAAe,GAAG,IAAI,CAACJ,SAAS,CAACD,KAAK,CAAC,CAACM,QAAQ;IACrD,IAAIC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACP,MAAM,KAAK,CAAC,CAAC,EAAE;MAC9CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACK,WAAW,CAAC;IAC/B;EACF,CAAC;EACDC,UAAUA,CAACV,KAAK,GAAG,CAAC,EAAE;IACpB,IAAI,IAAI,CAACK,eAAe,CAACH,MAAM,KAAK,CAAC,EAAE;MACrCC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B;IACF;IACA,MAAMO,IAAI,GAAG,IAAI,CAACN,eAAe,CAACL,KAAK,CAAC;IACxC,IAAI,CAACS,WAAW,GAAGE,IAAI;IACvB;IACA;EAEF,CAAC;;EACDC,mBAAmBA,CAACC,OAAO,EAAE;IAC3B,MAAMF,IAAI,GAAG,IAAI,CAACN,eAAe,CAACS,IAAI,CAACH,IAAI,IAAIA,IAAI,CAACE,OAAO,KAAKA,OAAO,CAAC;IACxE,MAAMb,KAAK,GAAG,IAAI,CAACK,eAAe,CAACU,OAAO,CAACJ,IAAI,CAAC;IAChD,IAAIX,KAAK,IAAI,CAAC,EAAE;MACd,IAAI,CAACK,eAAe,CAACW,MAAM,CAAChB,KAAK,EAAE,CAAC,CAAC;IACvC;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}