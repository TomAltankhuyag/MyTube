{"ast":null,"code":"const EMPTY = '';\nconst VIDEO_ID_SIZE = 11;\nconst WWW = 'www.';\nconst HTTPS = 'https://';\n\n// return video id or null\nexport default function videoIdParser(chosenString, opts = {}) {\n  // not a URL\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === VIDEO_ID_SIZE) {\n      return chosenString;\n    } else {\n      return EMPTY;\n    }\n  }\n  if (!hasDotComDomain(chosenString)) {\n    return EMPTY;\n  }\n  if (!isValidYoutubeUrl(chosenString)) {\n    console.error('not a certified youtube link 😶‍🌫️');\n    return EMPTY;\n  }\n\n  /////////////////////////////\n  // Once again I beg,\n  let url = chosenString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  if (!videoId) {\n    console.error('no v=');\n    return '';\n  }\n  return videoId;\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\nfunction isValidYoutubeUrl(urlString) {\n  const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  if (!youtubeUrl.includes(HTTPS)) {\n    youtubeUrl = HTTPS + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domainName => {\n    if (hostname === domainName) {\n      validUrl = true;\n      return false;\n    }\n  });\n  return validUrl;\n}\nfunction hasTopLevelDomain(string) {\n  return hasDotComDomain(string) || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}\nfunction hasDotComDomain(string) {\n  return string.includes('.com');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","opts","hasTopLevelDomain","length","hasDotComDomain","isValidYoutubeUrl","console","error","url","includes","params","URL","searchParams","videoId","get","getVideoIdParam","urlString","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","validUrl","every","domainName","string"],"sources":["X:/Coding/MyTube/src/utility/parser/video-id-parser.js"],"sourcesContent":["const EMPTY = ''\nconst VIDEO_ID_SIZE = 11\nconst WWW = 'www.'\nconst HTTPS = 'https://'\n\n// return video id or null\nexport default function videoIdParser(chosenString, opts = {}) {\n  // not a URL\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === VIDEO_ID_SIZE) {\n      return chosenString\n    } else {\n      return EMPTY\n    }\n  }\n\n  if (!hasDotComDomain(chosenString)) {\n    return EMPTY\n  }\n\n  if (!isValidYoutubeUrl(chosenString)) {\n    console.error('not a certified youtube link 😶‍🌫️')\n    return EMPTY\n  }\n\n  /////////////////////////////\n  // Once again I beg,\n  let url = chosenString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n\n  if (!videoId) {\n    console.error('no v=')\n    return ''\n  }\n  return videoId\n\n}\n\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  return videoId\n}\n\n\nfunction isValidYoutubeUrl(urlString) {\n  const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n\n  let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n  if (!youtubeUrl.includes(HTTPS)) {\n    youtubeUrl = HTTPS + youtubeUrl\n  }\n  const youtubeURLObject = new URL(youtubeUrl)\n\n  const hostname = youtubeURLObject.hostname\n  let validUrl = false\n  filterStrings.every((domainName) => {\n    if (hostname === domainName) {\n      validUrl = true\n      return false\n    }\n  })\n  return validUrl\n}\n\nfunction hasTopLevelDomain(string){\n  return hasDotComDomain(string) || string.includes('.ca') || string.includes('.net')|| string.includes('.gg')\n         || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n\nfunction hasDotComDomain(string) {\n  return string.includes('.com')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}