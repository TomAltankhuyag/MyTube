{"ast":null,"code":"export default function videoIdParser(chosenString, opts = {}) {\n  // not a URL\n  if (hasTopLevelDomain(chosenString) && chosenString.length === 11) {\n    return chosenString;\n  }\n\n  // Sinful constants\n  const WWW = 'www.';\n  const HTTP = 'https://';\n  // lord forgive me, we are checking if its a youtube link at all\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift));\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  if (!youtubeUrl.includes(HTTP)) {\n    youtubeUrl = HTTP + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domainName => {\n    if (hostname === domainName) {\n      validUrl = true;\n      return false;\n    }\n  });\n  if (!validUrl) {\n    console.error('not a certified youtube link üò∂‚Äçüå´Ô∏è');\n    return '';\n  }\n  /////////////////////////////\n  // Once again I beg,\n  let url = chosenString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTP)) {\n    url = HTTP + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  if (!videoId) {\n    console.log('no v=');\n  }\n  return videoId;\n}\nfunction hasTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}","map":{"version":3,"names":["videoIdParser","chosenString","opts","hasTopLevelDomain","length","WWW","HTTP","shift","includes","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","URL","hostname","validUrl","every","domainName","console","error","url","params","searchParams","videoId","get","log","string"],"sources":["X:/Coding/MyTube/src/utility/parser/video-id-parser.js"],"sourcesContent":["export default function videoIdParser(chosenString, opts = {}) {\n  // not a URL\n  if (hasTopLevelDomain(chosenString) && chosenString.length === 11) {\n    return chosenString\n  }\n\n\n  // Sinful constants\n  const WWW = 'www.'\n  const HTTP = 'https://'\n  // lord forgive me, we are checking if its a youtube link at all\n  const shift = chosenString.includes(WWW) ? chosenString.indexOf(WWW) + WWW.length : 0\n  let youtubeUrl = chosenString.substring(shift, chosenString.indexOf('/', shift))\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n  if (!youtubeUrl.includes(HTTP)) {\n    youtubeUrl = HTTP + youtubeUrl\n  }\n  const youtubeURLObject = new URL(youtubeUrl)\n\n  const hostname = youtubeURLObject.hostname\n  let validUrl = false\n  filterStrings.every((domainName) => {\n    if (hostname === domainName) {\n      validUrl = true\n      return false\n    }\n  })\n  if (!validUrl) {\n    console.error('not a certified youtube link üò∂‚Äçüå´Ô∏è')\n    return ''\n  }\n  /////////////////////////////\n  // Once again I beg,\n  let url = chosenString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTP)) {\n    url = HTTP + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n\n  if (!videoId) {\n    console.log('no v=')\n  }\n  return videoId\n\n}\n\nfunction hasTopLevelDomain(string){\n  return string.includes('.com') || string.includes('.ca') || string.includes('.net')|| string.includes('.gg')\n         || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n"],"mappings":"AAAA,eAAe,SAASA,aAAaA,CAACC,YAAY,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAC7D;EACA,IAAIC,iBAAiB,CAACF,YAAY,CAAC,IAAIA,YAAY,CAACG,MAAM,KAAK,EAAE,EAAE;IACjE,OAAOH,YAAY;EACrB;;EAGA;EACA,MAAMI,GAAG,GAAG,MAAM;EAClB,MAAMC,IAAI,GAAG,UAAU;EACvB;EACA,MAAMC,KAAK,GAAGN,YAAY,CAACO,QAAQ,CAACH,GAAG,CAAC,GAAGJ,YAAY,CAACQ,OAAO,CAACJ,GAAG,CAAC,GAAGA,GAAG,CAACD,MAAM,GAAG,CAAC;EACrF,IAAIM,UAAU,GAAGT,YAAY,CAACU,SAAS,CAACJ,KAAK,EAAEN,YAAY,CAACQ,OAAO,CAAC,GAAG,EAAEF,KAAK,CAAC,CAAC;EAChF,MAAMK,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;EAClE,IAAI,CAACF,UAAU,CAACF,QAAQ,CAACF,IAAI,CAAC,EAAE;IAC9BI,UAAU,GAAGJ,IAAI,GAAGI,UAAU;EAChC;EACA,MAAMG,gBAAgB,GAAG,IAAIC,GAAG,CAACJ,UAAU,CAAC;EAE5C,MAAMK,QAAQ,GAAGF,gBAAgB,CAACE,QAAQ;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpBJ,aAAa,CAACK,KAAK,CAAEC,UAAU,IAAK;IAClC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;MAC3BF,QAAQ,GAAG,IAAI;MACf,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,IAAI,CAACA,QAAQ,EAAE;IACbG,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAO,EAAE;EACX;EACA;EACA;EACA,IAAIC,GAAG,GAAGpB,YAAY;EACtB,IAAI,CAACoB,GAAG,CAACb,QAAQ,CAACH,GAAG,CAAC,EAAE;IACtBgB,GAAG,GAAGhB,GAAG,GAAGgB,GAAG;EACjB;EACA,IAAI,CAACA,GAAG,CAACb,QAAQ,CAACF,IAAI,CAAC,EAAE;IACvBe,GAAG,GAAGf,IAAI,GAAGe,GAAG;EAClB;EAEA,MAAMC,MAAM,GAAG,IAAIR,GAAG,CAACO,GAAG,CAAC,CAACE,YAAY;EAExC,MAAMC,OAAO,GAAGF,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAE/B,IAAI,CAACD,OAAO,EAAE;IACZL,OAAO,CAACO,GAAG,CAAC,OAAO,CAAC;EACtB;EACA,OAAOF,OAAO;AAEhB;AAEA,SAASrB,iBAAiBA,CAACwB,MAAM,EAAC;EAChC,OAAOA,MAAM,CAACnB,QAAQ,CAAC,MAAM,CAAC,IAAImB,MAAM,CAACnB,QAAQ,CAAC,KAAK,CAAC,IAAImB,MAAM,CAACnB,QAAQ,CAAC,MAAM,CAAC,IAAGmB,MAAM,CAACnB,QAAQ,CAAC,KAAK,CAAC,IAClGmB,MAAM,CAACnB,QAAQ,CAAC,MAAM,CAAC,IAAImB,MAAM,CAACnB,QAAQ,CAAC,MAAM,CAAC,IAAImB,MAAM,CAACnB,QAAQ,CAAC,KAAK,CAAC,IAAImB,MAAM,CAACnB,QAAQ,CAAC,MAAM,CAAC;AACnH"},"metadata":{},"sourceType":"module","externalDependencies":[]}