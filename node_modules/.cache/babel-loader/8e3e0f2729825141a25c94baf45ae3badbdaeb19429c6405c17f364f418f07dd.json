{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\nexport default function videoIdParser(chosenString) {\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === VIDEO_ID_SIZE) {\n      return chosenString;\n    } else {\n      return EMPTY;\n    }\n  }\n  if (!hasDotComDomain(chosenString)) {\n    return EMPTY;\n  }\n  if (!isValidYoutubeUrl(chosenString)) {\n    console.error('not a certified youtube link 😶‍🌫️');\n    return EMPTY;\n  }\n  const videoId = getVideoIdParam(chosenString);\n  return videoId;\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\nfunction isValidYoutubeUrl(urlString) {\n  const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n  let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n  if (!youtubeUrl.includes(HTTPS)) {\n    youtubeUrl = HTTPS + youtubeUrl;\n  }\n  const youtubeURLObject = new URL(youtubeUrl);\n  const hostname = youtubeURLObject.hostname;\n  let validUrl = false;\n  filterStrings.every(domainName => {\n    if (hostname === domainName) {\n      validUrl = true;\n      return false;\n    }\n  });\n  return validUrl;\n}\nfunction hasTopLevelDomain(string) {\n  return hasDotComDomain(string) || string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org');\n}\nfunction hasDotComDomain(string) {\n  return string.includes('.com');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","hasTopLevelDomain","length","hasDotComDomain","isValidYoutubeUrl","console","error","videoId","getVideoIdParam","urlString","url","includes","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","validUrl","every","domainName","string"],"sources":["X:/Coding/MyTube/src/utility/video-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\n\nexport default function videoIdParser(chosenString) {\n  if (!hasTopLevelDomain(chosenString)) {\n    if (chosenString.length === VIDEO_ID_SIZE) {\n      return chosenString\n    } else {\n      return EMPTY\n    }\n  }\n\n  if (!hasDotComDomain(chosenString)) {\n    return EMPTY\n  }\n\n  if (!isValidYoutubeUrl(chosenString)) {\n    console.error('not a certified youtube link 😶‍🌫️')\n    return EMPTY\n  }\n\n  const videoId = getVideoIdParam(chosenString)\n  return videoId\n}\n\nfunction getVideoIdParam(urlString) {\n  let url = urlString\n  if (!url.includes(WWW)) {\n    url = WWW + url\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url\n  }\n\n  const params = new URL(url).searchParams\n\n  const videoId = params.get('v')\n  return videoId\n}\n\nfunction isValidYoutubeUrl(urlString) {\n  const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\n\n  let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\n  const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\n\n  if (!youtubeUrl.includes(HTTPS)) {\n    youtubeUrl = HTTPS + youtubeUrl\n  }\n  const youtubeURLObject = new URL(youtubeUrl)\n\n  const hostname = youtubeURLObject.hostname\n  let validUrl = false\n  filterStrings.every((domainName) => {\n    if (hostname === domainName) {\n      validUrl = true\n      return false\n    }\n  })\n  return validUrl\n}\n\nfunction hasTopLevelDomain(string) {\n  return hasDotComDomain(string) || string.includes('.ca') || string.includes('.net') || string.includes('.gg')\n    || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\n}\n\nfunction hasDotComDomain(string) {\n  return string.includes('.com')\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,aAAa,EAAEC,GAAG,EAAEC,KAAK,QAAQ,wBAAwB;AAEzE,eAAe,SAASC,aAAaA,CAACC,YAAY,EAAE;EAClD,IAAI,CAACC,iBAAiB,CAACD,YAAY,CAAC,EAAE;IACpC,IAAIA,YAAY,CAACE,MAAM,KAAKN,aAAa,EAAE;MACzC,OAAOI,YAAY;IACrB,CAAC,MAAM;MACL,OAAOL,KAAK;IACd;EACF;EAEA,IAAI,CAACQ,eAAe,CAACH,YAAY,CAAC,EAAE;IAClC,OAAOL,KAAK;EACd;EAEA,IAAI,CAACS,iBAAiB,CAACJ,YAAY,CAAC,EAAE;IACpCK,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;IACpD,OAAOX,KAAK;EACd;EAEA,MAAMY,OAAO,GAAGC,eAAe,CAACR,YAAY,CAAC;EAC7C,OAAOO,OAAO;AAChB;AAEA,SAASC,eAAeA,CAACC,SAAS,EAAE;EAClC,IAAIC,GAAG,GAAGD,SAAS;EACnB,IAAI,CAACC,GAAG,CAACC,QAAQ,CAACd,GAAG,CAAC,EAAE;IACtBa,GAAG,GAAGb,GAAG,GAAGa,GAAG;EACjB;EACA,IAAI,CAACA,GAAG,CAACC,QAAQ,CAACb,KAAK,CAAC,EAAE;IACxBY,GAAG,GAAGZ,KAAK,GAAGY,GAAG;EACnB;EAEA,MAAME,MAAM,GAAG,IAAIC,GAAG,CAACH,GAAG,CAAC,CAACI,YAAY;EAExC,MAAMP,OAAO,GAAGK,MAAM,CAACG,GAAG,CAAC,GAAG,CAAC;EAC/B,OAAOR,OAAO;AAChB;AAEA,SAASH,iBAAiBA,CAACK,SAAS,EAAE;EACpC,MAAMO,KAAK,GAAGP,SAAS,CAACE,QAAQ,CAACd,GAAG,CAAC,GAAGY,SAAS,CAACQ,OAAO,CAACpB,GAAG,CAAC,GAAGA,GAAG,CAACK,MAAM,GAAG,CAAC;EAE/E,IAAIgB,UAAU,GAAGT,SAAS,CAACU,SAAS,CAACH,KAAK,EAAEP,SAAS,CAACQ,OAAO,CAAC,GAAG,EAAED,KAAK,CAAC,CAAC;EAC1E,MAAMI,aAAa,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,UAAU,CAAC;EAElE,IAAI,CAACF,UAAU,CAACP,QAAQ,CAACb,KAAK,CAAC,EAAE;IAC/BoB,UAAU,GAAGpB,KAAK,GAAGoB,UAAU;EACjC;EACA,MAAMG,gBAAgB,GAAG,IAAIR,GAAG,CAACK,UAAU,CAAC;EAE5C,MAAMI,QAAQ,GAAGD,gBAAgB,CAACC,QAAQ;EAC1C,IAAIC,QAAQ,GAAG,KAAK;EACpBH,aAAa,CAACI,KAAK,CAAEC,UAAU,IAAK;IAClC,IAAIH,QAAQ,KAAKG,UAAU,EAAE;MAC3BF,QAAQ,GAAG,IAAI;MACf,OAAO,KAAK;IACd;EACF,CAAC,CAAC;EACF,OAAOA,QAAQ;AACjB;AAEA,SAAStB,iBAAiBA,CAACyB,MAAM,EAAE;EACjC,OAAOvB,eAAe,CAACuB,MAAM,CAAC,IAAIA,MAAM,CAACf,QAAQ,CAAC,KAAK,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,KAAK,CAAC,IACxGe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,KAAK,CAAC,IAAIe,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC;AAC9G;AAEA,SAASR,eAAeA,CAACuB,MAAM,EAAE;EAC/B,OAAOA,MAAM,CAACf,QAAQ,CAAC,MAAM,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}