{"ast":null,"code":"import { mapState } from 'pinia';\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components';\nimport { usePlaylistStore } from '../store/playlist';\nimport { useSettingStore } from '../store/settings';\nimport { videoIdParser, playlistIdParser } from '../utility/youtube-id-parser';\nimport { fetchVideoInformation, fetchPlaylistInformation } from '../utility/youtube-video-validation';\nimport { YOUTUBE_API_CODES, controllerOptions } from '../constants/constants';\nimport { videoController } from '../utility/video-controller';\nexport default {\n  components: {\n    VTextField,\n    VSwitch,\n    VBtn\n  },\n  emits: ['toggle-switch', 'mouseleave'],\n  data() {\n    return {\n      key: 0,\n      userInput: '',\n      controllerOptions\n    };\n  },\n  computed: {\n    ...mapState(useSettingStore, ['autopause', 'devMode']),\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\n    hasInput() {\n      return this.userInput && this.userInput.replace(/\\s/g, '').length;\n    },\n    isCurrentPlaylistEmpty() {\n      return this.currentPlaylist.length === 0;\n    }\n  },\n  methods: {\n    async processAction(ACTION) {\n      const userInput = this.userInput;\n      this.userInput = '';\n      const payload = await this.processVideoInput(userInput);\n      if (payload && payload.status === YOUTUBE_API_CODES.VALID) {\n        videoController[ACTION](payload);\n      }\n    },\n    async onLoadPlaylist() {\n      if (!this.hasInput) {\n        console.warn('no input');\n        return;\n      }\n      const userInput = this.userInput;\n      this.userInput = '';\n      const playlistId = this.processPlaylistInput(userInput);\n      const payload = await fetchPlaylistInformation(playlistId);\n      if (payload.status === YOUTUBE_API_CODES.VALID) {\n        this.$store.playlist.loadPlaylistWithPayload(payload);\n      }\n    },\n    onSyncPlaylist() {\n      this.$store.playlist.syncPlaylist();\n    },\n    onPlayNext() {\n      videoController[controllerOptions.PLAY_NEXT]();\n    },\n    processPlaylistInput(userInput) {\n      const playlistId = playlistIdParser(userInput);\n      if (!playlistId) {\n        console.warn('INVALID INPUT');\n        return null;\n      }\n      return playlistId;\n    },\n    async processVideoInput(userInput) {\n      const videoId = videoIdParser(userInput);\n      if (!videoId) {\n        console.warn('improper videoId');\n        return null;\n      }\n      const payload = await fetchVideoInformation(videoId);\n      return payload;\n    },\n    onSwitchClick() {\n      this.$store.setting.toggleAutopause();\n    }\n  }\n};","map":{"version":3,"names":["mapState","VTextField","VSwitch","VBtn","usePlaylistStore","useSettingStore","videoIdParser","playlistIdParser","fetchVideoInformation","fetchPlaylistInformation","YOUTUBE_API_CODES","controllerOptions","videoController","components","emits","data","key","userInput","computed","hasInput","replace","length","isCurrentPlaylistEmpty","currentPlaylist","methods","processAction","ACTION","payload","processVideoInput","status","VALID","onLoadPlaylist","console","warn","playlistId","processPlaylistInput","$store","playlist","loadPlaylistWithPayload","onSyncPlaylist","syncPlaylist","onPlayNext","PLAY_NEXT","videoId","onSwitchClick","setting","toggleAutopause"],"sources":["X:\\Coding\\temp\\MyTube\\src\\components\\YoutubeController.vue"],"sourcesContent":["<template lang=\"pug\">\r\n.youtube-configurator\r\n  .input-container\r\n    v-text-field(v-model=\"userInput\"\r\n                 label='Enter a URL or video ID'\r\n                 @keyup.enter=\"processAction(controllerOptions.PLAY_NOW)\"\r\n                 color=\"purple\"\r\n                 clearable\r\n                 hide-details=\"auto\").input-style\r\n    .controller-buttons\r\n      v-btn.add-style(@click=\"onLoadPlaylist\").btn-style Play now\r\n      v-btn.add-style(@click=\"onLoadPlaylist\").btn-style Load Playlist\r\n      v-btn.add-style(@click=\"processAction(controllerOptions.QUEUE)\").btn-style Queue Song\r\n  v-switch(v-model=\"autopause\"\r\n           :label=\"autopause ? 'Autopause On' : 'Autopause Off'\"\r\n           :class=\"{activated: autopause}\"\r\n           @click=\"onSwitchClick\").switch-style\r\n  v-btn(v-if=\"devMode\" @click=\"onSyncPlaylist\").btn-style Sync Playlist\r\n  v-btn(@click=\"onPlayNext\" :disabled=\"isCurrentPlaylistEmpty\").btn-style Play Next\r\n\r\n</template>\r\n\r\n<script>\r\nimport { mapState } from 'pinia'\r\nimport { VTextField, VSwitch, VBtn } from 'vuetify/components'\r\nimport { usePlaylistStore } from '../store/playlist'\r\nimport { useSettingStore } from '../store/settings'\r\nimport { videoIdParser, playlistIdParser } from '../utility/youtube-id-parser'\r\nimport { fetchVideoInformation, fetchPlaylistInformation } from '../utility/youtube-video-validation'\r\nimport { YOUTUBE_API_CODES, controllerOptions } from '../constants/constants'\r\nimport {videoController} from '../utility/video-controller'\r\n\r\nexport default {\r\n  components: {\r\n    VTextField,\r\n    VSwitch,\r\n    VBtn\r\n  },\r\n  emits: ['toggle-switch', 'mouseleave'],\r\n  data() {\r\n    return {\r\n      key: 0,\r\n      userInput: '',\r\n      controllerOptions\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapState(useSettingStore, ['autopause', 'devMode']),\r\n    ...mapState(usePlaylistStore, ['currentPlaylist']),\r\n    hasInput() {\r\n      return this.userInput && this.userInput.replace(/\\s/g, '').length\r\n    },\r\n    isCurrentPlaylistEmpty() {\r\n      return this.currentPlaylist.length === 0\r\n    }\r\n  },\r\n  methods: {\r\n    async processAction(ACTION) {\r\n      const userInput = this.userInput\r\n      this.userInput = ''\r\n      const payload = await this.processVideoInput(userInput)\r\n      if (payload && payload.status === YOUTUBE_API_CODES.VALID) {\r\n        videoController[ACTION](payload)\r\n      }\r\n    },\r\n    async onLoadPlaylist() {\r\n      if (!this.hasInput) {\r\n        console.warn('no input')\r\n        return\r\n      }\r\n      const userInput = this.userInput\r\n      this.userInput = ''\r\n      const playlistId = this.processPlaylistInput(userInput)\r\n      const payload = await fetchPlaylistInformation(playlistId)\r\n      if (payload.status === YOUTUBE_API_CODES.VALID) {\r\n        this.$store.playlist.loadPlaylistWithPayload(payload)\r\n      }\r\n    },\r\n    onSyncPlaylist() {\r\n      this.$store.playlist.syncPlaylist()\r\n    },\r\n    onPlayNext() {\r\n      videoController[controllerOptions.PLAY_NEXT]()\r\n    },\r\n     processPlaylistInput(userInput) {\r\n      const playlistId = playlistIdParser(userInput)\r\n      if (!playlistId) {\r\n        console.warn('INVALID INPUT')\r\n        return null\r\n      }\r\n      return playlistId\r\n    },\r\n    async processVideoInput(userInput) {\r\n      const videoId = videoIdParser(userInput)\r\n      if (!videoId) {\r\n        console.warn('improper videoId')\r\n        return null\r\n      }\r\n      const payload = await fetchVideoInformation(videoId)\r\n      return payload\r\n    },\r\n    onSwitchClick(){\r\n      this.$store.setting.toggleAutopause()\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style></style>\r\n<style lang=\"scss\" scoped>\r\n@import 'src/styles/flex';\r\n\r\n$input-height : 50px;\r\n\r\n.youtube-configurator {\r\n  @include flex-column();\r\n  justify-content: space-between;\r\n  padding: 25px;\r\n\r\n\r\n  .input-container {\r\n    @include flex-column();\r\n    box-sizing: border-box;\r\n    margin: 50px 0;\r\n    padding: 10px;\r\n    @media screen and (min-width: 650px) {\r\n      @include flex-row();\r\n    }\r\n    .input-style {\r\n      width: 200px;\r\n      margin: 0 5px;\r\n      color: pink;\r\n      @media screen and (min-width: 650px) {\r\n        width: 350px;\r\n      }\r\n    }\r\n\r\n    .add-style {\r\n      height: $input-height;\r\n      width: 140px;\r\n    }\r\n\r\n\r\n  }\r\n  .switch-style {\r\n    color: green;\r\n    &.activated {\r\n      color: red;\r\n    }\r\n  }\r\n  .controller-buttons  {\r\n    @include flex-column();\r\n\r\n  }\r\n  .btn-style {\r\n    margin-bottom: 10px;\r\n    background-color: pink;\r\n    color: white;\r\n  }\r\n\r\n  // .activated {\r\n  //   color: red;\r\n  // }\r\n\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}