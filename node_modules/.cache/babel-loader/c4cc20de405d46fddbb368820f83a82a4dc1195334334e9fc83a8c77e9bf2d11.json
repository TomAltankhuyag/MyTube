{"ast":null,"code":"import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\";\n\n/**\r\n * @param {String} chosenString - Can be a URL or just the video Id itself\r\n * @returns - returns the videoId if its a youtube url,\r\n *          - returns the string if its a non-url and matches 11 characters,\r\n *          - returns '' otherwise\r\n */\nexport function videoIdParser(chosenString) {\n  if (hasNonYoutubeTopLevelDomain(chosenString)) {\n    return EMPTY;\n  }\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\n    return chosenString.length === VIDEO_ID_SIZE ? chosenString : EMPTY;\n  }\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => {\n    return isValid;\n  }).catch(e => {\n    console.error(e);\n  });\n  if (!isValid) {\n    return EMPTY;\n  }\n  const videoId = getVideoIdParam(chosenString);\n  return videoId;\n}\nexport function playlistIdParser(chosenString) {\n  if (hasNonYoutubeTopLevelDomain(chosenString)) {\n    return EMPTY;\n  }\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\n    return chosenString.length > 25 ? chosenString : EMPTY;\n  }\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => {\n    return isValid;\n  }).catch(e => {\n    console.error(e);\n  });\n  if (!isValid) {\n    return EMPTY;\n  }\n  const playlistId = getListIdParam(chosenString);\n  return playlistId;\n}\nfunction getListIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const playlistId = params.get('list');\n  return playlistId;\n}\nfunction getVideoIdParam(urlString) {\n  let url = urlString;\n  if (!url.includes(WWW)) {\n    url = WWW + url;\n  }\n  if (!url.includes(HTTPS)) {\n    url = HTTPS + url;\n  }\n  const params = new URL(url).searchParams;\n  const videoId = params.get('v');\n  return videoId;\n}\nasync function isValidYoutubeUrl(urlString) {\n  try {\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0;\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift));\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be'];\n    if (!youtubeUrl.includes(HTTPS)) {\n      youtubeUrl = HTTPS + youtubeUrl;\n    }\n    const youtubeURLObject = new URL(youtubeUrl);\n    const hostname = youtubeURLObject.hostname;\n    let isValidUrl = false;\n    filterStrings.every(domainName => {\n      if (hostname === domainName) {\n        isValidUrl = true;\n        return false;\n      }\n    });\n    return isValidUrl;\n  } catch (e) {\n    return false;\n  }\n}\nfunction hasNonYoutubeTopLevelDomain(string) {\n  return string.includes('.ca') || string.includes('.net') || string.includes('.gg') || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org') || string.includes('.us');\n}\nfunction hasYoutubeTopLevelDomain(string) {\n  return string.includes('.com') || string.includes('.be');\n}","map":{"version":3,"names":["EMPTY","VIDEO_ID_SIZE","WWW","HTTPS","videoIdParser","chosenString","hasNonYoutubeTopLevelDomain","hasYoutubeTopLevelDomain","length","isValid","isValidYoutubeUrl","then","catch","e","console","error","videoId","getVideoIdParam","playlistIdParser","playlistId","getListIdParam","urlString","url","includes","params","URL","searchParams","get","shift","indexOf","youtubeUrl","substring","filterStrings","youtubeURLObject","hostname","isValidUrl","every","domainName","string"],"sources":["X:/Coding/temp/MyTube/src/utility/youtube-id-parser.js"],"sourcesContent":["import { EMPTY, VIDEO_ID_SIZE, WWW, HTTPS } from \"../constants/constants\"\r\n\r\n/**\r\n * @param {String} chosenString - Can be a URL or just the video Id itself\r\n * @returns - returns the videoId if its a youtube url,\r\n *          - returns the string if its a non-url and matches 11 characters,\r\n *          - returns '' otherwise\r\n */\r\nexport function videoIdParser(chosenString) {\r\n  if (hasNonYoutubeTopLevelDomain(chosenString)) {\r\n    return EMPTY\r\n  }\r\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\r\n    return chosenString.length === VIDEO_ID_SIZE ? chosenString : EMPTY\r\n  }\r\n\r\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => { return isValid }).catch(e => {\r\n    console.error(e)\r\n  })\r\n\r\n  if (!isValid) {\r\n    return EMPTY\r\n  }\r\n\r\n  const videoId = getVideoIdParam(chosenString)\r\n  return videoId\r\n}\r\n\r\nexport function playlistIdParser(chosenString) {\r\n  if (hasNonYoutubeTopLevelDomain(chosenString)) {\r\n    return EMPTY\r\n  }\r\n  if (!hasYoutubeTopLevelDomain(chosenString)) {\r\n    return chosenString.length > 25 ? chosenString : EMPTY\r\n  }\r\n  const isValid = isValidYoutubeUrl(chosenString).then(isValid => { return isValid }).catch(e => {\r\n    console.error(e)\r\n  })\r\n\r\n  if (!isValid) {\r\n    return EMPTY\r\n  }\r\n\r\n  const playlistId = getListIdParam(chosenString)\r\n  return playlistId\r\n}\r\nfunction getListIdParam(urlString) {\r\n  let url = urlString\r\n  if (!url.includes(WWW)) {\r\n    url = WWW + url\r\n  }\r\n  if (!url.includes(HTTPS)) {\r\n    url = HTTPS + url\r\n  }\r\n  const params = new URL(url).searchParams\r\n\r\n  const playlistId = params.get('list')\r\n  return playlistId\r\n}\r\n\r\nfunction getVideoIdParam(urlString) {\r\n  let url = urlString\r\n  if (!url.includes(WWW)) {\r\n    url = WWW + url\r\n  }\r\n  if (!url.includes(HTTPS)) {\r\n    url = HTTPS + url\r\n  }\r\n  const params = new URL(url).searchParams\r\n\r\n  const videoId = params.get('v')\r\n  return videoId\r\n}\r\n\r\nasync function isValidYoutubeUrl(urlString) {\r\n  try {\r\n    const shift = urlString.includes(WWW) ? urlString.indexOf(WWW) + WWW.length : 0\r\n    let youtubeUrl = urlString.substring(shift, urlString.indexOf('/', shift))\r\n\r\n    const filterStrings = ['youtube.com', 'm.youtube.com', 'youtu.be']\r\n\r\n    if (!youtubeUrl.includes(HTTPS)) {\r\n      youtubeUrl = HTTPS + youtubeUrl\r\n    }\r\n\r\n    const youtubeURLObject = new URL(youtubeUrl)\r\n    const hostname = youtubeURLObject.hostname\r\n    let isValidUrl = false\r\n\r\n    filterStrings.every((domainName) => {\r\n      if (hostname === domainName) {\r\n        isValidUrl = true\r\n        return false\r\n      }\r\n    })\r\n    return isValidUrl\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction hasNonYoutubeTopLevelDomain(string) {\r\n  return string.includes('.ca') || string.includes('.net') || string.includes('.gg')\r\n  || string.includes('.txt') || string.includes('.gov') || string.includes('.io') || string.includes('.org')\r\n  || string.includes('.us')\r\n}\r\n\r\nfunction hasYoutubeTopLevelDomain(string) {\r\n  return string.includes('.com') || string.includes('.be')\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}